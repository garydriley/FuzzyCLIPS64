TRUE
FuzzyCLIPS> (batch "seqop.bat")
TRUE
FuzzyCLIPS> (defglobal ?*x* = (create$ 1 2 3))
FuzzyCLIPS> (deffunction foo (?a ?b)
  (printout t "Foo arguments: " ?a " " ?b crlf))
FuzzyCLIPS> (batch "seqop2.bat")
TRUE
FuzzyCLIPS> (expand$ $?a)
[MISCFUN1] The function 'expand$' must be used in the argument list of a function call.
FALSE
FuzzyCLIPS> (deffunction boggle ($?a) (return $?a))
FuzzyCLIPS> (boggle 1 2 3)
(1 2 3)
FuzzyCLIPS> (progn $?a)
[EVALUATN1] Variable ?a is unbound.
FALSE
FuzzyCLIPS> (while $?a do)
[EVALUATN1] Variable ?a is unbound.
FALSE
FuzzyCLIPS> (if $?a then 1)
[EVALUATN1] Variable ?a is unbound.
FALSE
FuzzyCLIPS> (eval "$?*x*")
(1 2 3)
FuzzyCLIPS> (defrule foo
  ?f<-(foo $?b)
=>
  (retract ?f)
  (printout t ?b crlf)
  (printout t $?b crlf))
FuzzyCLIPS> (assert (foo a b c))
<Fact-1>
FuzzyCLIPS> (run)
(a b c)
(a b c)
FuzzyCLIPS> (undeffunction boggle)
FuzzyCLIPS> (undefrule foo)
FuzzyCLIPS> (+ $?*x*)
[ARGACCES1] Function '+' expected at least 2 arguments.
FuzzyCLIPS> (deffunction bar ($?a) (foo $?a))
[ARGACCES1] Function 'foo' expected exactly 2 arguments.

ERROR:
(deffunction MAIN::bar
   ($?a)
   (foo $?a)
FuzzyCLIPS> (bar 1 2)

[EXPRNPSR3] Missing function declaration for 'bar'.
FuzzyCLIPS> (bar 1 2 3)

[EXPRNPSR3] Missing function declaration for 'bar'.
FuzzyCLIPS> (> (expand$ (create$ 3)))
[ARGACCES1] Function '>' expected at least 2 arguments.
FALSE
FuzzyCLIPS> (> (expand$ (create$ 4 3)))
TRUE
FuzzyCLIPS> (> (expand$ (create$ 4)) (expand$ (create$ 3)))
TRUE
FuzzyCLIPS> (> (expand$ (create$ 3)) (expand$ (create$)))
[ARGACCES1] Function '>' expected at least 2 arguments.
FALSE
FuzzyCLIPS> (set-sequence-operator-recognition TRUE)
FALSE
FuzzyCLIPS> (batch "seqop2.bat")
TRUE
FuzzyCLIPS> (expand$ $?a)
[EXPRNPSR4] $ Sequence operator not a valid argument for function 'expand$'.
FuzzyCLIPS> (deffunction boggle ($?a) (return $?a))
[EXPRNPSR4] $ Sequence operator not a valid argument for function 'return'.

ERROR:
(deffunction MAIN::boggle
   ($?a)
   (return $?a)
FuzzyCLIPS> (boggle 1 2 3)

[EXPRNPSR3] Missing function declaration for 'boggle'.
FuzzyCLIPS> (progn $?a)
[EXPRNPSR4] $ Sequence operator not a valid argument for function 'progn'.
FuzzyCLIPS> (while $?a do)
[EXPRNPSR4] $ Sequence operator not a valid argument for function 'while'.
FuzzyCLIPS> (if $?a then 1)
[EXPRNPSR4] $ Sequence operator not a valid argument for function 'if'.
FuzzyCLIPS> (eval "$?*x*")
(1 2 3)
FuzzyCLIPS> (defrule foo
  ?f<-(foo $?b)
=>
  (retract ?f)
  (printout t ?b crlf)
  (printout t $?b crlf))
FuzzyCLIPS> (assert (foo a b c))
<Fact-2>
FuzzyCLIPS> (run)
(a b c)
abc
FuzzyCLIPS> (undeffunction boggle)
[PRNTUTIL1] Unable to find deffunction 'boggle'.
FuzzyCLIPS> (undefrule foo)
FuzzyCLIPS> (+ $?*x*)
6
FuzzyCLIPS> (deffunction bar ($?a) (foo $?a))
FuzzyCLIPS> (bar 1 2)
Foo arguments: 1 2
FuzzyCLIPS> (bar 1 2 3)
[ARGACCES1] Function 'foo' expected exactly 2 arguments.
[PRCCODE4] Execution halted during the actions of deffunction 'bar'.
FALSE
FuzzyCLIPS> (> (expand$ (create$ 3)))
[ARGACCES1] Function '>' expected at least 2 arguments.
FALSE
FuzzyCLIPS> (> (expand$ (create$ 4 3)))
TRUE
FuzzyCLIPS> (> (expand$ (create$ 4)) (expand$ (create$ 3)))
TRUE
FuzzyCLIPS> (> (expand$ (create$ 3)) (expand$ (create$)))
[ARGACCES1] Function '>' expected at least 2 arguments.
FALSE
FuzzyCLIPS> (load seqop.clp)
%$#@&&**!~&
TRUE
FuzzyCLIPS> (watch all)
FuzzyCLIPS> (unwatch statistics)
FuzzyCLIPS> (unwatch focus)
FuzzyCLIPS> (reset)
:== ?*x* ==> (1 2 3) <== (1 2 3)
==> instance [s1] of SEQOP-TEST-CLASS
MSG >> create ED:1 (<Instance-s1>)
HND >> create primary in class USER
       ED:1 (<Instance-s1>)
HND << create primary in class USER
       ED:1 (<Instance-s1>)
MSG << create ED:1 (<Instance-s1>)
MSG >> init ED:1 (<Instance-s1>)
HND >> init primary in class USER
       ED:1 (<Instance-s1>)
::= local slot woz in instance s1 <- (watch dog)
HND << init primary in class USER
       ED:1 (<Instance-s1>)
MSG << init ED:1 (<Instance-s1>)
==> f-1     (fact (foo nil) (bar 1 2 3 4)) CF 1.00 
==> f-2     (flat-fact a b c d e) CF 1.00 
==> Activation 0      lhs-seqop-failure: f-1,f-2
GNC >> test-arg  ED:1 (1 2 3 4)
MTH >> test-arg:#1  ED:1 (1 2 3 4)
MTH << test-arg:#1  ED:1 (1 2 3 4)
GNC << test-arg  ED:1 (1 2 3 4)
GNC >> test-arg  ED:1 (b c d e)
MTH >> test-arg:#1  ED:1 (b c d e)
MTH << test-arg:#1  ED:1 (b c d e)
GNC << test-arg  ED:1 (b c d e)
==> Activation 10     lhs-seqop-success: f-1,f-2
FuzzyCLIPS> (run)
FIRE    1 lhs-seqop-success: f-1,f-2
<== f-1     (fact (foo nil) (bar 1 2 3 4)) CF 1.00 
<== Activation 0      lhs-seqop-failure: f-1,f-2
<== f-2     (flat-fact a b c d e) CF 1.00 
(abc def ghi) --> abcdefghi ; abcdefghi
Success:
(1 2 3 4) --> 1234
(b c d e) --> bcde
FuzzyCLIPS> (dfnx-seqop-test abc def ghi)
DFN >> dfnx-seqop-test ED:1 (abc def ghi)
(abc def ghi) --> abcdefghi ; abcdefghi
(def ghi) --> defghi
DFN << dfnx-seqop-test ED:1 (abc def ghi)
FuzzyCLIPS> (send [s1] seqop-test abc def ghi)
MSG >> seqop-test ED:1 (<Instance-s1> abc def ghi)
HND >> seqop-test primary in class SEQOP-TEST-CLASS
       ED:1 (<Instance-s1> abc def ghi)
(abc def ghi) --> abcdefghi ; abcdefghi
(def ghi) --> defghi
(watch dog) --> watchdog
==> instance [gen1] of SEQOP-TEST-CLASS
MSG >> create ED:2 (<Instance-gen1>)
HND >> create primary in class USER
       ED:2 (<Instance-gen1>)
HND << create primary in class USER
       ED:2 (<Instance-gen1>)
MSG << create ED:2 (<Instance-gen1>)
MSG >> put-woz ED:2 (<Instance-gen1> (watch dog) abc def ghi (watch dog))
HND >> put-woz primary in class SEQOP-TEST-CLASS
       ED:2 (<Instance-gen1> (watch dog) abc def ghi (watch dog))
::= local slot woz in instance gen1 <- (watch dog abc def ghi watch dog)
HND << put-woz primary in class SEQOP-TEST-CLASS
       ED:2 (<Instance-gen1> (watch dog) abc def ghi (watch dog))
MSG << put-woz ED:2 (<Instance-gen1> (watch dog) abc def ghi (watch dog))
MSG >> init ED:2 (<Instance-gen1>)
HND >> init primary in class USER
       ED:2 (<Instance-gen1>)
HND << init primary in class USER
       ED:2 (<Instance-gen1>)
MSG << init ED:2 (<Instance-gen1>)
MSG >> get-woz ED:2 (<Instance-gen1>)
HND >> get-woz primary in class SEQOP-TEST-CLASS
       ED:2 (<Instance-gen1>)
HND << get-woz primary in class SEQOP-TEST-CLASS
       ED:2 (<Instance-gen1>)
MSG << get-woz ED:2 (<Instance-gen1>)
(watch dog abc def ghi watch dog)
HND << seqop-test primary in class SEQOP-TEST-CLASS
       ED:1 (<Instance-s1> abc def ghi)
MSG << seqop-test ED:1 (<Instance-s1> abc def ghi)
FuzzyCLIPS> (+ "abc" "def" "ghi")
GNC >> +  ED:1 ("abc" "def" "ghi")
MTH >> +:#2  ED:1 ("abc" "def" "ghi")
(abc def ghi) --> abcdefghi ; abcdefghi
("abc" "def" "ghi") --> abcdefghi
MTH << +:#2  ED:1 ("abc" "def" "ghi")
GNC << +  ED:1 ("abc" "def" "ghi")
"abcdefghi"
FuzzyCLIPS> (unwatch all)
FuzzyCLIPS> (bind ?a (create$ 1 2 3))
(1 2 3)
FuzzyCLIPS> (defglobal ?*b* = (create$ 4 5 6))
FuzzyCLIPS> ?a
(1 2 3)
FuzzyCLIPS> ?*b*
(4 5 6)
FuzzyCLIPS> $?a
(1 2 3)
FuzzyCLIPS> $?*b*
(4 5 6)
FuzzyCLIPS> (+ ?a)
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (+ ?*b*)
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (+ $?a)
6
FuzzyCLIPS> (+ $?*b*)
15
FuzzyCLIPS> (eval "?a")
(1 2 3)
FuzzyCLIPS> (eval "?*b*")
(4 5 6)
FuzzyCLIPS> (eval "$?a")
(1 2 3)
FuzzyCLIPS> (eval "$?*b*")
(4 5 6)
FuzzyCLIPS> (eval "(+ ?a)")
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (eval "(+ ?*b*)")
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (eval "(+ $?a)")
6
FuzzyCLIPS> (eval "(+ $?*b*)")
15
FuzzyCLIPS> (set-sequence-operator-recognition FALSE)
TRUE
FuzzyCLIPS> ?a
(1 2 3)
FuzzyCLIPS> ?*b*
(4 5 6)
FuzzyCLIPS> $?a
(1 2 3)
FuzzyCLIPS> $?*b*
(4 5 6)
FuzzyCLIPS> (+ ?a)
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (+ ?*b*)
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (+ $?a)
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (+ $?*b*)
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (eval "?a")
(1 2 3)
FuzzyCLIPS> (eval "?*b*")
(4 5 6)
FuzzyCLIPS> (eval "$?a")
(1 2 3)
FuzzyCLIPS> (eval "$?*b*")
(4 5 6)
FuzzyCLIPS> (eval "(+ ?a)")
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (eval "(+ ?*b*)")
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (eval "(+ $?a)")
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (eval "(+ $?*b*)")
[GENRCEXE1] No applicable methods for '+'.
FALSE
FuzzyCLIPS> (dribble-off)
