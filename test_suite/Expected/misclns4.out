TRUE
FuzzyCLIPS> (batch "misclns4.bat")
TRUE
FuzzyCLIPS> (clear) ;; Case 1
FuzzyCLIPS> (defmodule A (export ?ALL))
FuzzyCLIPS> (deftemplate A::foo)
FuzzyCLIPS> (defmodule MAIN (import A ?ALL) (export ?ALL))
FuzzyCLIPS> (defmodule B (import MAIN ?ALL))
FuzzyCLIPS> (deftemplate B::foo)

[CSTRCPSR3] Cannot define deftemplate 'foo' because of an import/export conflict.

ERROR:
(deftemplate B::foo
FuzzyCLIPS> (clear) ;; Case 2
FuzzyCLIPS> (defmodule B)
FuzzyCLIPS> (defmodule B::foo)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for module specifier.

ERROR:
(defmodule B::foo
FuzzyCLIPS> (clear) ;; Case 3
FuzzyCLIPS> (defmodule ROOT (export ?ALL))
FuzzyCLIPS> (deftemplate A)
FuzzyCLIPS> (defmodule CHILD-1 (import ROOT ?ALL) (export ?ALL))
FuzzyCLIPS> (defmodule CHILD-2 (import ROOT ?ALL) (export ?ALL))
FuzzyCLIPS> (defmodule CHILD-3 (import CHILD-1 ?ALL) (import CHILD-2 ?ALL))
FuzzyCLIPS> (clear) ;; Case 4
FuzzyCLIPS> (defmodule d3 (export ?ALL))
FuzzyCLIPS> (deftemplate t1)
FuzzyCLIPS> (deftemplate t2)
FuzzyCLIPS> (defmodule d4 (export deftemplate t3 t4) (import d3 deftemplate t1))
FuzzyCLIPS> (clear) ;; Case 5
FuzzyCLIPS> (deftemplate foo (slot x) (slot y))
FuzzyCLIPS> (defrule bar (foo (x 3) (x 4) (y 3)) =>)

[PRNTUTIL5] The slot 'x' has already been parsed.

ERROR:
(defrule MAIN::bar
   (foo (x 3) (x
FuzzyCLIPS> (clear) ;; Case 6
FuzzyCLIPS> (deftemplate foo (slot x (type SYMBOL)))
FuzzyCLIPS> (defrule bar (foo (x ?x)) => (+ ?x 1))

[RULECSTR3] Previous variable bindings of ?x caused the type restrictions
for argument #1 of the expression (+ ?x 1) found in the rule's RHS to be violated.

ERROR:
(defrule MAIN::bar
   (foo (x ?x))
   =>
   (+ ?x 1))
FuzzyCLIPS> (defrule bar (foo (x ?x)) => (assert (yak (+ ?x 1))))

[RULECSTR3] Previous variable bindings of ?x caused the type restrictions
for argument #1 of the expression (+ ?x 1) found in the rule's RHS to be violated.

ERROR:
(defrule MAIN::bar
   (foo (x ?x))
   =>
   (assert (yak (+ ?x 1))))
FuzzyCLIPS> (clear) ;; Case 7
FuzzyCLIPS> (defmodule a)
FuzzyCLIPS> (assert (start))
<Fact-1>
FuzzyCLIPS> (defrule foo (start) =>)
FuzzyCLIPS> (defmodule b)
FuzzyCLIPS> (assert (begin))
<Fact-2>
FuzzyCLIPS> (defrule bar (begin) =>)
FuzzyCLIPS> (agenda)
0      bar: f-2
For a total of 1 activation.
FuzzyCLIPS> (agenda a)
0      foo: f-1
For a total of 1 activation.
FuzzyCLIPS> (agenda b)
0      bar: f-2
For a total of 1 activation.
FuzzyCLIPS> (agenda *)
MAIN:
a:
   0      foo: f-1
b:
   0      bar: f-2
For a total of 2 activations.
FuzzyCLIPS> (clear) ;; Case 8
FuzzyCLIPS> (defglobal ?*x* = 0)
FuzzyCLIPS> (defrule foo ?f <- (foo) => (bind ?*x* ?f))
FuzzyCLIPS> (assert (foo))
<Fact-1>
FuzzyCLIPS> (run)
FuzzyCLIPS> (fact-index ?*x*)
1
FuzzyCLIPS> (retract ?*x*)
FuzzyCLIPS> (fact-index ?*x*)
[PRNTUTIL11] The fact f-1 has been retracted.
-1
FuzzyCLIPS> (retract ?*x*)
FuzzyCLIPS> (clear) ;; Case 9
FuzzyCLIPS> (defmodule FOO (export ?ALL))
FuzzyCLIPS> (deftemplate FOO::foo)
FuzzyCLIPS> (defmodule BAR (export ?ALL) (import FOO ?ALL))
FuzzyCLIPS> (deftemplate BAR::foo)

[CSTRCPSR3] Cannot define deftemplate 'foo' because of an import/export conflict.

ERROR:
(deftemplate BAR::foo
FuzzyCLIPS> (clear) ;; Case 10
FuzzyCLIPS> (defmodule FOO (export ?ALL))
FuzzyCLIPS> (deftemplate FOO::foo)
FuzzyCLIPS> (defmodule BAR (export ?ALL))
FuzzyCLIPS> (deftemplate BAR::foo)
FuzzyCLIPS> (defmodule YAK (import FOO ?ALL) (import BAR ?ALL))

[CSTRCPSR3] Cannot define defmodule 'YAK' because of an import/export conflict caused by the deftemplate 'foo'.

ERROR:
(defmodule YAK
   (import FOO ?ALL)
   (import BAR ?ALL))
FuzzyCLIPS> (clear) ;; Case 11
FuzzyCLIPS> 
(deftemplate set 
  (multislot members))
FuzzyCLIPS> 
(deffacts stuff
  (set (members Q R S D T A B D)))
FuzzyCLIPS> 
(defrule remove-duplicates
   ?f <- (set (members $?b ?element $?m ?element $?e))
   =>
   (printout t ?b " " ?element " " ?m " " ?e crlf)
   (modify ?f (members ?b ?element ?m ?e)))
FuzzyCLIPS> (reset)
FuzzyCLIPS> (run)
(Q R S) D (T A B) ()
FuzzyCLIPS> (facts)
f-1     (set (members Q R S D T A B)) CF 1.00 
For a total of 1 fact.
FuzzyCLIPS> (clear) ;; Case 12
FuzzyCLIPS> 
(deftemplate set 
  (multislot m1)
  (multislot m2))
FuzzyCLIPS> 
(deffacts stuff
  (set (m1 Q R S D T A B D X) (m2 Q R D A B D S X)))
FuzzyCLIPS> 
(defrule remove-duplicates
   ?f <- (set (m1 $?b1 ?element1 $?m1 ?element1 $?e1 X)
              (m2 $?b2 ?element2 $?m2 ?element2 $?e2 X))
   =>
   (printout t ?b1 " " ?element1 " " ?m1 " " ?e1 crlf)
   (printout t ?b2 " " ?element2 " " ?m2 " " ?e2 crlf)
   (modify ?f (m1 ?b1 ?element1 ?m1 ?e1)
              (m2 ?b2 ?element2 ?m2 ?e2)))
FuzzyCLIPS> (reset)
FuzzyCLIPS> (run)
(Q R S) D (T A B) ()
(Q R) D (A B) (S)
FuzzyCLIPS> (facts)
f-1     (set (m1 Q R S D T A B) (m2 Q R D A B S)) CF 1.00 
For a total of 1 fact.
FuzzyCLIPS> (clear) ;; Case 13
FuzzyCLIPS> 
(deftemplate set 
  (multislot m2))
FuzzyCLIPS> 
(deffacts stuff
  (set (m2 D D S X)))
FuzzyCLIPS> 
(defrule remove-duplicates
   ?f <- (set (m2 ?l2 $?m2 ?l2 $?e2 X))
   =>
   (printout t ?l2 " " ?m2 " " ?e2 crlf)
   (modify ?f (m2 ?l2 ?m2 ?e2)))
FuzzyCLIPS> (reset)
FuzzyCLIPS> (run)
D () (S)
FuzzyCLIPS> (facts)
f-1     (set (m2 D S)) CF 1.00 
For a total of 1 fact.
FuzzyCLIPS> (clear) ;; Case 14
FuzzyCLIPS> (defglobal ?*x* = 0)
FuzzyCLIPS> (defmodule  MAIN (export ?ALL))
FuzzyCLIPS> (defmodule FOO (import MAIN defglobal ?ALL))
FuzzyCLIPS> (bind ?*x* 1)
1
FuzzyCLIPS> ?*x*
1
FuzzyCLIPS> (clear) ;; Case 15
FuzzyCLIPS> 
(defrule blah (m2 ?l2 $?m2 ?l2 $?e2 X) 
   => 
   (printout t ?l2 " " ?m2 " " ?e2 crlf))
FuzzyCLIPS> (assert (m2 D D S X))
<Fact-1>
FuzzyCLIPS> (run)
D () (S)
FuzzyCLIPS> (clear) ;; Case 16
FuzzyCLIPS> 
(deftemplate adder
  (multislot #-1)
  (multislot #-2))
FuzzyCLIPS> 
(deffacts adder-info
  (adder (#-1 1 0 1) (#-2 1 1))
  (adder (#-1 1) (#-2 0)))
FuzzyCLIPS> 
(defrule another-bug
  (adder (#-1 $?n1 ?v)
         (#-2 $?n2 ~?v))
  =>)
FuzzyCLIPS> (reset)
FuzzyCLIPS> (agenda)
0      another-bug: f-2
For a total of 1 activation.
FuzzyCLIPS> (clear) ;; Case 17
FuzzyCLIPS> (defmodule MAIN (export ?ALL))
FuzzyCLIPS> (defmodule A (import MAIN ?ALL) (export ?ALL))
FuzzyCLIPS> (deftemplate A::a (slot x))
FuzzyCLIPS> (defmodule B (import MAIN ?ALL) (import A ?ALL) (export ?ALL))
FuzzyCLIPS> (deftemplate B::b (slot y))
FuzzyCLIPS> (clear) ;; Case 18
FuzzyCLIPS> 
(defrule foo
  (declare (salience 4))
  (x)
  (not (and (a) (b)))
  (y)
  =>)
FuzzyCLIPS>   
(defrule bar
  (declare (salience 3))
  (x)
  (not (and (a) (b)))
  (test (< 5 3))
  (y)
  =>)
FuzzyCLIPS>   
(defrule dog
  (declare (salience 2))
  (x)
  (z)
  (not (and (a) (b)))
  (test (< 5 3))
  (y)
  =>)
FuzzyCLIPS>   
(defrule yak
  (declare (salience 1))
  (x)
  (z)
  (not (and (a) (b)))
  (y)
  =>)
FuzzyCLIPS> (reset)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (y))
<Fact-2>
FuzzyCLIPS> (agenda)
4      foo: f-1,*,f-2
For a total of 1 activation.
FuzzyCLIPS> (assert (z))
<Fact-3>
FuzzyCLIPS> (agenda)
4      foo: f-1,*,f-2
1      yak: f-1,f-3,*,f-2
For a total of 2 activations.
FuzzyCLIPS> (assert (a))
<Fact-4>
FuzzyCLIPS> (agenda)
4      foo: f-1,*,f-2
1      yak: f-1,f-3,*,f-2
For a total of 2 activations.
FuzzyCLIPS> (assert (b))
<Fact-5>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (clear) ;; Case 19
FuzzyCLIPS> (assert (foo))
<Fact-1>
FuzzyCLIPS> (defmodule BAR)
FuzzyCLIPS> (assert (bar))
<Fact-2>
FuzzyCLIPS> (save-facts "Temp//bug.tmp")
1
FuzzyCLIPS> (bsave "Temp//bug.bin")
TRUE
FuzzyCLIPS> (bload "Temp//bug.bin")
TRUE
FuzzyCLIPS> (load-facts "Temp//bug.tmp") 
[FACTRHS1] Implied deftemplate 'bar' cannot be created with binary load in effect.
Function load-facts encountered an error
-1
FuzzyCLIPS> (facts)
FuzzyCLIPS> (clear) ;; Case 20
FuzzyCLIPS> 
(defrule foo1
  (declare (salience 10))
  =>)
FuzzyCLIPS> 
(defrule foo2
  (declare (auto-focus TRUE))
  =>)
FuzzyCLIPS> 
(defrule foo3
  (declare (auto-focus TRUE) (salience 10))
  =>)
FuzzyCLIPS> 
(defrule foo4
  (declare (salience 10) (auto-focus TRUE))
  =>)
FuzzyCLIPS> (ppdefrule foo1)
(defrule MAIN::foo1
   (declare (salience 10))
   =>)
FuzzyCLIPS> (ppdefrule foo2)
(defrule MAIN::foo2
   (declare (auto-focus TRUE))
   =>)
FuzzyCLIPS> (ppdefrule foo3)
(defrule MAIN::foo3
   (declare (auto-focus TRUE) (salience 10))
   =>)
FuzzyCLIPS> (ppdefrule foo4)
(defrule MAIN::foo4
   (declare (salience 10) (auto-focus TRUE))
   =>)
FuzzyCLIPS> (clear) ; watching specific items
FuzzyCLIPS> (unwatch all)
FuzzyCLIPS> (defglobal ?*foo* = 1)
FuzzyCLIPS> (defglobal ?*bar* = 2)
FuzzyCLIPS> (deftemplate foo)
FuzzyCLIPS> (deftemplate bar)
FuzzyCLIPS> (defrule foo (foo) => (assert (bar)))
FuzzyCLIPS> (defrule bar (bar) =>)
FuzzyCLIPS> (watch rules foo)
FuzzyCLIPS> (watch globals foo)
FuzzyCLIPS> (watch facts foo)
FuzzyCLIPS> (watch activations foo)
FuzzyCLIPS> (watch rules yak)
[ARGACCES2] Function 'watch' expected argument #2 to be of type defrule.
FuzzyCLIPS> (watch globals yak)
[ARGACCES2] Function 'watch' expected argument #2 to be of type defglobal.
FuzzyCLIPS> (watch facts yak)
[ARGACCES2] Function 'watch' expected argument #2 to be of type deftemplate.
FuzzyCLIPS> (watch activations yak)
[ARGACCES2] Function 'watch' expected argument #2 to be of type defrule.
FuzzyCLIPS> (watch compilations foo)
[ARGACCES1] Function 'watch' expected exactly 1 argument.
FuzzyCLIPS> (watch statistics foo)
[ARGACCES1] Function 'watch' expected exactly 1 argument.
FuzzyCLIPS> (watch focus foo)
[ARGACCES1] Function 'watch' expected exactly 1 argument.
FuzzyCLIPS> (reset)
:== ?*foo* ==> 1 <== 1
FuzzyCLIPS> (bind ?*foo* 3)
:== ?*foo* ==> 3 <== 1
3
FuzzyCLIPS> (bind ?*bar* 4)
4
FuzzyCLIPS> (assert (foo))
==> f-1     (foo) CF 1.00 
==> Activation 0      foo: f-1
<Fact-1>
FuzzyCLIPS> (run)
FIRE    1 foo: f-1
FuzzyCLIPS> (list-watch-items)
facts = off
instances = off
slots = off
rules = off
activations = off
messages = off
message-handlers = off
generic-functions = off
methods = off
deffunctions = off
compilations = off
statistics = off
globals = off
focus = off
FuzzyCLIPS> (list-watch-items globals)
globals = off
MAIN:
   foo = on
   bar = off
FuzzyCLIPS> (list-watch-items facts)
facts = off
MAIN:
   foo = on
   bar = off
FuzzyCLIPS> (list-watch-items rules)
rules = off
MAIN:
   foo = on
   bar = off
FuzzyCLIPS> (list-watch-items activations)
activations = off
MAIN:
   foo = on
   bar = off
FuzzyCLIPS> (list-watch-items compilations)
compilations = off
FuzzyCLIPS> (list-watch-items statistics)
statistics = off
FuzzyCLIPS> (list-watch-items focus)
focus = off
FuzzyCLIPS> (unwatch all)
FuzzyCLIPS> (list-watch-items)
facts = off
instances = off
slots = off
rules = off
activations = off
messages = off
message-handlers = off
generic-functions = off
methods = off
deffunctions = off
compilations = off
statistics = off
globals = off
focus = off
FuzzyCLIPS> (list-watch-items globals)
globals = off
MAIN:
   foo = off
   bar = off
FuzzyCLIPS> (list-watch-items facts)
facts = off
MAIN:
   foo = off
   bar = off
FuzzyCLIPS> (list-watch-items rules)
rules = off
MAIN:
   foo = off
   bar = off
FuzzyCLIPS> (list-watch-items activations)
activations = off
MAIN:
   foo = off
   bar = off
FuzzyCLIPS> (list-watch-items compilations)
compilations = off
FuzzyCLIPS> (list-watch-items statistics)
statistics = off
FuzzyCLIPS> (list-watch-items focus)
focus = off
FuzzyCLIPS> (clear) ;; bsave-instances issue
FuzzyCLIPS> (defclass A (is-a USER) (slot x))
FuzzyCLIPS> (make-instance a of A (x 1))
[a]
FuzzyCLIPS> (bsave-instances "Temp//bug.bin")
1
FuzzyCLIPS> (reset)
FuzzyCLIPS> (bload-instances "Temp//bug.bin")
1
FuzzyCLIPS> (clear) ;; incremental reset issue
FuzzyCLIPS> (assert (B NP14 NP))
<Fact-1>
FuzzyCLIPS> 
(defrule Rule1
  (A ?NP)
  (B ?NP NP)
  =>)
FuzzyCLIPS> (matches Rule1)
Matches for Pattern 1
 None
Matches for Pattern 2
f-1
Partial matches for CEs 1 - 2
 None
Activations
 None
(1 0 0)
FuzzyCLIPS> 
(defrule Rule2
  (A ?PP)
  (B ?PP PP)
  =>)
FuzzyCLIPS> (matches Rule1)
Matches for Pattern 1
 None
Matches for Pattern 2
f-1
Partial matches for CEs 1 - 2
 None
Activations
 None
(1 0 0)
FuzzyCLIPS> (clear) ;; garbage collection issue
FuzzyCLIPS> (defglobal ?*A* = (create$ 1 2 3 4 5 6 7 8 9 10))
FuzzyCLIPS> (defglobal ?*B* = (create$ 1 2 3 4 5 6 7 8 9 10))
FuzzyCLIPS> (defglobal ?*C* = (create$))
FuzzyCLIPS> 
(deffunction dummy-not-OK ()
    (bind ?i 1)
    (while (<= ?i 100)
        (foreach ?x ?*A*
            (foreach ?y ?*B*
                (bind ?*C* (create$ ?*C* (+ (* 100 ?i) (* 10 ?x) ?y)))
            )
        )
        (bind ?i (+ ?i 1))
    )
)
FuzzyCLIPS> (dummy-not-OK)
FALSE
FuzzyCLIPS> (dummy-not-OK)
FALSE
FuzzyCLIPS> (dummy-not-OK)
FALSE
FuzzyCLIPS> (clear) ;; module order save issue
FuzzyCLIPS> (defmodule A (export deftemplate AT))
FuzzyCLIPS> (deftemplate A::AT (slot x))
FuzzyCLIPS> (defmodule MAIN (import A deftemplate AT))
FuzzyCLIPS> (defrule MAIN::RAT (AT (x 3)) =>)
FuzzyCLIPS> (save "Temp//rules.sav")
TRUE
FuzzyCLIPS> (clear)
FuzzyCLIPS> (load "Temp//rules.sav")
+%+*
TRUE
FuzzyCLIPS> (clear) ;; bsave/bload issue
FuzzyCLIPS> 
(defrule x_ba6
   (Doklad KodDokladu ?V163_TV9040)
   (Doklad KodDokladu ?V163_TV9043)
   (or (test (eq  ?V163_TV9040 "36"))
       (test (eq  ?V163_TV9043 "37")))
   =>)
FuzzyCLIPS> (defrule x_ba8 =>)
FuzzyCLIPS> (defrule x_baa =>)
FuzzyCLIPS> (defrule x_ba8 =>)
FuzzyCLIPS> (bsave "Temp//temp.bin")   
TRUE
FuzzyCLIPS> (clear)
FuzzyCLIPS> (bload "Temp//temp.bin")  
TRUE
FuzzyCLIPS> (rules)
x_ba6
x_baa
x_ba8
For a total of 3 defrules.
FuzzyCLIPS> (clear)
FuzzyCLIPS> (watch compilations)
FuzzyCLIPS> (load "gnrcdef.clp")
Defining defgeneric: splunge
   Method #1 defined.
Defining defgeneric: splunge
   Method #2 defined.
Defining defgeneric: splunge

[CSTRCPSR1] gnrcdef.clp, Line 3, WARNING: Method #1 redefined.
Defining defgeneric: foobar

[CSTRCPSR1] gnrcdef.clp, Line 6, WARNING: Redefining defgeneric: foobar
TRUE
FuzzyCLIPS> (unwatch compilations)
FuzzyCLIPS> (clear) ;; void value in implied deftemplate fact
FuzzyCLIPS> (assert (foo a (agenda) b (agenda) c (agenda)))
<Fact-1>
FuzzyCLIPS> (assert (foo (agenda) a))
<Fact-2>
FuzzyCLIPS> (facts)
f-1     (foo a b c) CF 1.00 
f-2     (foo a) CF 1.00 
For a total of 2 facts.
FuzzyCLIPS> (fact-slot-value 1 implied)
(a b c)
FuzzyCLIPS> (fact-slot-value 2 implied)
(a)
FuzzyCLIPS> (length$ (fact-slot-value 1 implied))
3
FuzzyCLIPS> (length$ (fact-slot-value 2 implied))
1
FuzzyCLIPS> (clear) ; Multifield wildcard not allowed in single field slot
FuzzyCLIPS> (deftemplate bar (slot x))
FuzzyCLIPS> (defrule blah (bar (x $?)) =>) 

[TMPLTDEF2] The single field slot 'x' can only contain a single field value.

ERROR:
(defrule MAIN::blah
   (bar (x $?)
FuzzyCLIPS> (clear)
FuzzyCLIPS> (defmethod clear ((?a EXTERNAL-ADDRESS))) ; Crash
FuzzyCLIPS> (undefgeneric clear)
FuzzyCLIPS> (clear)
FuzzyCLIPS> 
(deftemplate factoid
   (slot source)
   (slot status)
   (slot processed))
FuzzyCLIPS> 
(deffacts initial
   (factoid (source input) 
            (status normal) 
            (processed no)))
FuzzyCLIPS>             
(defrule overwrite ""
   ?f <- (factoid (source input) (processed no))
   =>   
   (modify ?f (processed yes))
   (duplicate ?f (source output)
                 (processed yes)))
FuzzyCLIPS> (reset)
FuzzyCLIPS> (run)
FuzzyCLIPS> (facts)
f-1     (factoid (source input) (status normal) (processed yes)) CF 1.00 
f-2     (factoid (source output) (status normal) (processed yes)) CF 1.00 
For a total of 2 facts.
FuzzyCLIPS> (clear)
FuzzyCLIPS> (dribble-off)
