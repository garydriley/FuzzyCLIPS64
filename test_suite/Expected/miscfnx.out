TRUE
FuzzyCLIPS> (batch "miscfnx.bat")
TRUE
FuzzyCLIPS> (clear)                            ; 10.9.1
FuzzyCLIPS> (fact-index)                       ; 10.9.1
[ARGACCES1] Function 'fact-index' expected exactly 1 argument.
FuzzyCLIPS> (fact-index a)                     ; 10.9.1
[ARGACCES2] Function 'fact-index' expected argument #1 to be of type fact address.
FuzzyCLIPS> (fact-index 1)                     ; 10.9.1
[ARGACCES2] Function 'fact-index' expected argument #1 to be of type fact address.
FuzzyCLIPS> (defglobal ?*gfi* = 1)             ; 10.9.1
FuzzyCLIPS> (defrule foo
  ?f <- (the item)
  =>
  (bind ?*gfi* ?f)
  (printout t (fact-index ?f) crlf))
FuzzyCLIPS> (deffacts stuff (a) (b) (c))
FuzzyCLIPS> (reset)                            ; 10.9.1
FuzzyCLIPS> (assert (the item))                ; 10.9.1
<Fact-4>
FuzzyCLIPS> (run)                              ; 10.9.1
4
FuzzyCLIPS> (fact-index ?*gfi*)                ; 10.9.1
4
FuzzyCLIPS> (fact-index ?*gfi* ?*gfi*)         ; 10.9.1
[ARGACCES1] Function 'fact-index' expected exactly 1 argument.
FuzzyCLIPS> (retract ?*gfi*)                   ; 10.9.1
FuzzyCLIPS> (fact-index ?*gfi*)                ; 10.9.1
[PRNTUTIL11] The fact f-4 has been retracted.
-1
FuzzyCLIPS> (clear)                            ; 10.9.1
FuzzyCLIPS> (setgen 10)                        ; 10.9.4
10
FuzzyCLIPS> (setgen)                           ; 10.9.4
[ARGACCES1] Function 'setgen' expected exactly 1 argument.
FuzzyCLIPS> (setgen 10 20)                     ; 10.9.4
[ARGACCES1] Function 'setgen' expected exactly 1 argument.
FuzzyCLIPS> (setgen a)                         ; 10.9.4
[ARGACCES2] Function 'setgen' expected argument #1 to be of type integer.
FuzzyCLIPS> (setgen 30.3)                      ; 10.9.4
[ARGACCES2] Function 'setgen' expected argument #1 to be of type integer.
FuzzyCLIPS> (setgen 20)                        ; 10.9.4  
20
FuzzyCLIPS> (assert (gen20 gen21 gen22))       ; 10.9.4
<Fact-1>
FuzzyCLIPS> (gensym)                           ; 10.9.2
gen20
FuzzyCLIPS> (gensym a)                         ; 10.9.2
[ARGACCES1] Function 'gensym' expected exactly 0 arguments.
FuzzyCLIPS> (gensym)                           ; 10.9.2
gen21
FuzzyCLIPS> (gensym*)                          ; 10.9.3
gen23
FuzzyCLIPS> (setgen 20)                        ; 10.9.3
20
FuzzyCLIPS> (gensym*)                          ; 10.9.3   
gen23
FuzzyCLIPS> (clear)                            ; 10.9.3
FuzzyCLIPS> (setgen 20)                        ; 10.9.3
20
FuzzyCLIPS> (gensym*)                          ; 10.9.3
gen20
FuzzyCLIPS> (seed)                             ; 10.9.6
[ARGACCES1] Function 'seed' expected exactly 1 argument.
FuzzyCLIPS> (seed a)                           ; 10.9.6
[ARGACCES2] Function 'seed' expected argument #1 to be of type integer.
FuzzyCLIPS> (seed 20 a)                        ; 10.9.6
[ARGACCES1] Function 'seed' expected exactly 1 argument.
FuzzyCLIPS> (seed 30.5)                        ; 10.9.6
[ARGACCES2] Function 'seed' expected argument #1 to be of type integer.
FuzzyCLIPS> (seed 100)                         ; 10.9.6
FuzzyCLIPS> (defglobal ?*r1* = 0
           ?*r2* = 0
           ?*r3* = 0)
FuzzyCLIPS> (progn (bind ?*r1* (random))
       (bind ?*r2* (random))
       (bind ?*r3* (random))
       TRUE)
TRUE
FuzzyCLIPS> (seed 100)                         ; 10.9.5
FuzzyCLIPS> (= ?*r1* (random))                 ; 10.9.5
TRUE
FuzzyCLIPS> (= ?*r2* (random))                 ; 10.9.5
TRUE
FuzzyCLIPS> (= ?*r3* (random))                 ; 10.9.5
TRUE
FuzzyCLIPS> (progn (random) TRUE)              ; 10.9.5
TRUE
FuzzyCLIPS> (progn (random 10) TRUE)           ; 10.9.5
[MISCFUN2] Function random expected either 0 or 2 arguments
TRUE
FuzzyCLIPS> (if)                               ; 10.9.7

[EXPRNPSR2] Expected a constant, variable, or expression.
FuzzyCLIPS> (if (> 3 4) then)                  ; 10.9.7
FALSE
FuzzyCLIPS> (if TRUE then (+ 3 4))             ; 10.9.7
7
FuzzyCLIPS> (if FALSE then (create$ a b))      ; 10.9.7
FALSE
FuzzyCLIPS> (if (create$) then 3 else 4)       ; 10.9.7
3
FuzzyCLIPS> (if TRUE then a else b)            ; 10.9.7
a
FuzzyCLIPS> (if FALSE then a else b)           ; 10.9.7
b
FuzzyCLIPS> (if TRUE then (+ 2 1) else (+ 8 9))
3
FuzzyCLIPS> (if FALSE then (+ 3 7) else (- 9 2))
7
FuzzyCLIPS> (if TRUE then (printout t "1") (printout t "2" crlf)
         else (printout t "3") (printout t "4" crlf))
12
FuzzyCLIPS> (if FALSE then (printout t "1") (printout t "2" crlf)
          else (printout t "3") (printout t "4" crlf))
34
FuzzyCLIPS> (while)                            ; 10.9.8

[EXPRNPSR2] Expected a constant, variable, or expression.
FuzzyCLIPS> (while FALSE)                      ; 10.9.8
FALSE
FuzzyCLIPS> (while FALSE do)                   ; 10.9.8
FALSE
FuzzyCLIPS> (while FALSE 3)                    ; 10.9.8
FALSE
FuzzyCLIPS> (while FALSE 3 4)                  ; 10.9.8
FALSE
FuzzyCLIPS> (while FALSE (+ 2 3))              ; 10.9.8
FALSE
FuzzyCLIPS> (while FALSE a (+ 2 3))            ; 10.9.8
FALSE
FuzzyCLIPS> (while FALSE do 3)                 ; 10.9.8
FALSE
FuzzyCLIPS> (while FALSE do 3 4)               ; 10.9.8
FALSE
FuzzyCLIPS> (while FALSE do (+ 2 3))           ; 10.9.8
FALSE
FuzzyCLIPS> (while FALSE do a (+ 2 3))         ; 10.9.8
FALSE
FuzzyCLIPS> (clear)                            ; 10.9.8
FuzzyCLIPS> (defglobal ?*t* = 10)              ; 10.9.8
FuzzyCLIPS> (while (> ?*t* 0) do
   (printout t ?*t* "... ")
   (bind ?*t* (- ?*t* 1))
   (if (= ?*t* 0) then (printout t crlf)))
10... 9... 8... 7... 6... 5... 4... 3... 2... 1... 
FALSE
FuzzyCLIPS> (clear)                            ; 10.9.8
FuzzyCLIPS> (progn (time) TRUE)                ; 10.9.9
TRUE
FuzzyCLIPS> (<= (time) (time))                 ; 10.9.9
TRUE
FuzzyCLIPS> (time a)                           ; 10.9.9
[ARGACCES1] Function 'time' expected exactly 0 arguments.
FuzzyCLIPS> (progn)                            ; 10.9.10
FALSE
FuzzyCLIPS> (progn x)                          ; 10.9.10
x
FuzzyCLIPS> (progn 1 2 3)                      ; 10.9.10
3
FuzzyCLIPS> (progn (create$ d) 3 (create$ b c))
(b c)
FuzzyCLIPS> (defglobal ?*v1* = 0 ?*v2* = 1)    ; 10.9.10
FuzzyCLIPS> (progn (bind ?*v1* 3)
       (bind ?*v2* 5)
       (+ ?*v1* ?*v2*))
8
FuzzyCLIPS> (clear)                            ; 10.9.11 & 10.9.12
FuzzyCLIPS> (load "miscfnx.clp")               ; 10.9.11 & 10.9.12
!&~!!!!
TRUE
FuzzyCLIPS> (return)                           ; 10.9.11 & 10.9.12...

[PRCDRPSR2] The return function is not valid in this context.
FuzzyCLIPS> (return 2)

[PRCDRPSR2] The return function is not valid in this context.
FuzzyCLIPS> (return 1 2 3)

[PRCDRPSR2] The return function is not valid in this context.
FuzzyCLIPS> (return blah)

[PRCDRPSR2] The return function is not valid in this context.
FuzzyCLIPS> (sign 10)
1
FuzzyCLIPS> (sign -5)
-1
FuzzyCLIPS> (sign 0)
0
FuzzyCLIPS> (generic-sign 10)
1
FuzzyCLIPS> (generic-sign -5)
-1
FuzzyCLIPS> (generic-sign 0)
0
FuzzyCLIPS> (send 10 sign)
1
FuzzyCLIPS> (send -5 sign)
-1
FuzzyCLIPS> (send 0 sign)
0
FuzzyCLIPS> (break)

[PRCDRPSR2] The break function not valid in this context.
FuzzyCLIPS> (break 1)

[PRCDRPSR2] The break function not valid in this context.
FuzzyCLIPS> (iterate 0)

FuzzyCLIPS> (iterate 10)
0 1 2 3 4 5 6 7 8 9 
FuzzyCLIPS> (test-return-in-while)
50
FuzzyCLIPS> (while 1 do 
   (do-break)
   (printout t "Out of context break test succeeded" crlf)
   (break))
Out of context break test succeeded
FALSE
FuzzyCLIPS> (while 1 do 
   (nested-break)
   (printout t "Nested break test succeeded" crlf)
   (break))
Nested break test succeeded
FALSE
FuzzyCLIPS> (while 1 do
   (return)
   (printout t "return in while test succeeded" crlf)
   (break))

[PRCDRPSR2] The return function is not valid in this context.
FuzzyCLIPS> (while 1 do
  (iterate (break)))

[PRCDRPSR2] The break function not valid in this context.
FuzzyCLIPS> (iterate (return))

[PRCDRPSR2] The return function is not valid in this context.
FuzzyCLIPS> (get-function-restrictions +)
"2*ld"
FuzzyCLIPS> (get-function-restrictions make-instance)
"0**"
FuzzyCLIPS> (get-function-restrictions)
[ARGACCES1] Function 'get-function-restrictions' expected exactly 1 argument.
FuzzyCLIPS> (get-function-restrictions bogus)
[PRNTUTIL1] Unable to find function 'bogus'.
""
FuzzyCLIPS> (progn (bind ?x 1) (bind ?x) ?x)
[EVALUATN1] Variable ?x is unbound.
FALSE
FuzzyCLIPS> (defglobal ?*x* = (pi))
FuzzyCLIPS> (watch globals)
FuzzyCLIPS> (bind ?*x* 1 2 3)
:== ?*x* ==> (1 2 3) <== 3.14159265358979
(1 2 3)
FuzzyCLIPS> (bind ?*x*)
:== ?*x* ==> 3.14159265358979 <== (1 2 3)
3.14159265358979
FuzzyCLIPS> (unwatch globals)
FuzzyCLIPS> (progn (bind ?x abc def ghi) ?x)
(abc def ghi)
FuzzyCLIPS> (bind ?x)
FALSE
FuzzyCLIPS> (clear)
FuzzyCLIPS> (loop-for-count (+ 3 2) do (printout t Foo crlf))
Foo
Foo
Foo
Foo
Foo
FALSE
FuzzyCLIPS> (loop-for-count -100 do (printout t "SHOULD NOT EXECUTE" crlf))
FALSE
FuzzyCLIPS> (loop-for-count)

[EXPRNPSR2] Expected a constant, variable, or expression.
FuzzyCLIPS> (loop-for-count FALSE do abc)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for loop-for-count function.
FuzzyCLIPS> (loop-for-count (?x 3)
  (loop-for-count (?y -4 -2) do
     (printout t (* ?x ?y) " ")
     (loop-for-count (?z -15 (* ?x ?y))
        (printout t X))
     (printout t crlf)))
-4 XXXXXXXXXXXX
-3 XXXXXXXXXXXXX
-2 XXXXXXXXXXXXXX
-8 XXXXXXXX
-6 XXXXXXXXXX
-4 XXXXXXXXXXXX
-12 XXXX
-9 XXXXXXX
-6 XXXXXXXXXX
FALSE
FuzzyCLIPS> (loop-for-count 1000 do (printout t Woz crlf) (break))
Woz
FALSE
FuzzyCLIPS> (deffunction foo ()
  (loop-for-count 1000 do (printout t Woz crlf) (return 4)))
FuzzyCLIPS> (foo)
Woz
4
FuzzyCLIPS> (clear)
FuzzyCLIPS> (defglobal ?*x* = 0)  ;; CR0194
FuzzyCLIPS> (defglobal ?*y* = 1)
FuzzyCLIPS> (deffunction foo (?val)
  (switch ?val
     (case ?*x* then *x*)
     (case ?*y* then *y*)
     (default none)))
FuzzyCLIPS> (foo 0)
*x*
FuzzyCLIPS> (foo 1)
*y*
FuzzyCLIPS> (foo 2)
none
FuzzyCLIPS> (bind ?*y* 2)
2
FuzzyCLIPS> (foo 2)
*y*
FuzzyCLIPS> (switch)

[EXPRNPSR2] Expected a constant, variable, or expression.
FuzzyCLIPS> (switch 1 (default))
FALSE
FuzzyCLIPS> (switch 2)
FALSE
FuzzyCLIPS> (clear)
FuzzyCLIPS> (progn (break)) ;; CR0194 and CR0196

[PRCDRPSR2] The break function not valid in this context.
FuzzyCLIPS> (progn (return))

[PRCDRPSR2] The return function is not valid in this context.
FuzzyCLIPS> (deffunction foo () (progn 1 2 (return)))
FuzzyCLIPS> (foo)
FuzzyCLIPS> (while TRUE do
  (progn (break) (printout t ERROR crlf)))
FALSE
FuzzyCLIPS> (clear)
FuzzyCLIPS> (defclass A (is-a USER))
FuzzyCLIPS> (bind ?v (instance-address (make-instance [a1] of A)))
<Instance-a1>
FuzzyCLIPS> (timetag ?v)
2
FuzzyCLIPS> (send ?v delete)
TRUE
FuzzyCLIPS> (timetag ?v)
[PRNTUTIL1] Unable to find instance a1.
-1
FuzzyCLIPS> (bind ?v (assert (a b c)))
<Fact-1>
FuzzyCLIPS> (timetag ?v)
4
FuzzyCLIPS> (retract ?v)
FuzzyCLIPS> (timetag ?v)
[PRNTUTIL11] The fact f-1 has been retracted.
-1
FuzzyCLIPS> (clear)
FuzzyCLIPS> (acos 3)
[EMATHFUN1] Domain error for 'acos' function.
0.0
FuzzyCLIPS> (get-error)
DOMAIN_ERROR
FuzzyCLIPS> (clear-error)
DOMAIN_ERROR
FuzzyCLIPS> (get-error)
FALSE
FuzzyCLIPS> (acos 3)
[EMATHFUN1] Domain error for 'acos' function.
0.0
FuzzyCLIPS> (clear-error)
DOMAIN_ERROR
FuzzyCLIPS> (get-error)
FALSE
FuzzyCLIPS> (set-error 3)
FuzzyCLIPS> (clear-error)
3
FuzzyCLIPS> (get-error 3)
[ARGACCES1] Function 'get-error' expected exactly 0 arguments.
FuzzyCLIPS> (clear-error 3)
[ARGACCES1] Function 'clear-error' expected exactly 0 arguments.
FuzzyCLIPS> (set-error)
[ARGACCES1] Function 'set-error' expected exactly 1 argument.
FuzzyCLIPS> (set-error 3 4)
[ARGACCES1] Function 'set-error' expected exactly 1 argument.
FuzzyCLIPS> (dribble-off)
