TRUE
FuzzyCLIPS> (batch "drtest10.bat")
TRUE
FuzzyCLIPS> (clear)                   ; Memory Leak #1
FuzzyCLIPS> (progn (release-mem) TRUE)
TRUE
FuzzyCLIPS> (mem-used)
1697966  ;; Can be different
FuzzyCLIPS> (defclass SOURCE (is-a USER))
FuzzyCLIPS> 
(deffunction foo()
   (do-for-all-instances ((?x SOURCE)) TRUE
      (bind ?y 0)
      (bogus)))

[EXPRNPSR3] Missing function declaration for 'bogus'.

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for instance-set query function.

ERROR:
(deffunction MAIN::foo
   ()
   (do-for-all-instances ((?x SOURCE))
      TRUE
      (bind ?y 0)
      (
FuzzyCLIPS> (clear)                   ; Memory Leak #2
FuzzyCLIPS> (progn (release-mem) TRUE)
TRUE
FuzzyCLIPS> (mem-used)
1698150 ;; Reference mem-used number
FuzzyCLIPS> (defclass SOURCE (is-a USER))
FuzzyCLIPS> 
(deffunction foo()
   (do-for-all-instances ((?x SOURCE)) (progn (bind ?y 3) (bogus) TRUE)
      (+ 3 4)))

[EXPRNPSR3] Missing function declaration for 'bogus'.

ERROR:
(deffunction MAIN::foo
   ()
   (do-for-all-instances ((?x SOURCE))
      (progn
         (bind ?y 3)
         (
FuzzyCLIPS> (clear)                   ; Memory Leak #3
FuzzyCLIPS> (progn (release-mem) TRUE)
TRUE
FuzzyCLIPS> (mem-used)
1698150 ;; Should be the same as above
FuzzyCLIPS> (deftemplate SOURCE)
FuzzyCLIPS> 
(deffunction foo()
   (do-for-all-facts ((?x SOURCE)) TRUE
      (bind ?y 0)
      (bogus)))

[EXPRNPSR3] Missing function declaration for 'bogus'.

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for fact-set query function.

ERROR:
(deffunction MAIN::foo
   ()
   (do-for-all-facts ((?x SOURCE))
      TRUE
      (bind ?y 0)
      (
FuzzyCLIPS> (clear)                   ; Memory Leak #41
FuzzyCLIPS> (progn (release-mem) TRUE)
TRUE
FuzzyCLIPS> (mem-used)
1698150 ;; Should be the same as above
FuzzyCLIPS> (deftemplate SOURCE)
FuzzyCLIPS> 
(deffunction foo()
   (do-for-all-facts ((?x SOURCE)) (progn (bind ?y 3) (bogus) TRUE)
      (+ 3 4)))

[EXPRNPSR3] Missing function declaration for 'bogus'.

ERROR:
(deffunction MAIN::foo
   ()
   (do-for-all-facts ((?x SOURCE))
      (progn
         (bind ?y 3)
         (
FuzzyCLIPS> (clear)                   ; Memory Leak #5
FuzzyCLIPS> (progn (release-mem) TRUE)
TRUE
FuzzyCLIPS> (mem-used)
1698150 ;; Should be the same as above
FuzzyCLIPS> 
(defclass FOO (is-a USER)
   (slot value1))
FuzzyCLIPS> 
(deffunction foo ()
   (make-instance of FOO
      (value1 (bogus))))

[EXPRNPSR3] Missing function declaration for 'bogus'.

ERROR:
(deffunction MAIN::foo
   ()
   (make-instance of FOO
      (value1 (bogus
FuzzyCLIPS> (clear)                   ; Memory Leak #6
FuzzyCLIPS> (progn (release-mem) TRUE)
TRUE
FuzzyCLIPS> (mem-used)
1698150 ;; Should be the same as above
FuzzyCLIPS> 
(deftemplate FOO
   (slot value1 (type SYMBOL)))
FuzzyCLIPS> 
(defrule foo
   (FOO (value1 ?x))
   =>
   (+ ?x 1)
   (printout t ?x))

[RULECSTR3] Previous variable bindings of ?x caused the type restrictions
for argument #1 of the expression (+ ?x 1) found in the rule's RHS to be violated.

ERROR:
(defrule MAIN::foo
   (FOO (value1 ?x))
   =>
   (+ ?x 1)
   (printout t ?x))
FuzzyCLIPS> (clear)
FuzzyCLIPS> (progn (release-mem) TRUE)
TRUE
FuzzyCLIPS> (mem-used)
1698150 ;; Should be the same as above
FuzzyCLIPS> (clear)
FuzzyCLIPS> 
(deftemplate nar 
   (slot bc))
FuzzyCLIPS> 
(defrule migrant 
   (test (eq 1 1))
   (nar (bc ?bc))
   =>
   (printout t ?bc crlf))
FuzzyCLIPS> 
(deffacts stuff
   (nar  (bc "US")))
FuzzyCLIPS> (reset)
FuzzyCLIPS> (run)
US
FuzzyCLIPS> (clear)                   ; SourceForge Bug #12
FuzzyCLIPS> (defclass Test (is-a USER) (multislot Contents))
FuzzyCLIPS> (make-instance of Test (Contents a b c d e f g h))
[gen508]
FuzzyCLIPS> 
(defrule BrokenPatternMatchBehavior-Object
   (object (is-a Test) 
           (Contents $?first ?second ?third $?fourth ?fifth))
   =>
   (printout t ?first " " ?second " " ?third " " ?fourth " " ?fifth crlf))
FuzzyCLIPS> (run)
(a b c d e) f g () h
(a b c d) e f (g) h
(a b c) d e (f g) h
(a b) c d (e f g) h
(a) b c (d e f g) h
() a b (c d e f g) h
FuzzyCLIPS> (clear) ;; CLIPSESG Bug
FuzzyCLIPS> 
(defclass A (is-a USER)
  (role concrete)
  (slot foo)
  (slot bar))
FuzzyCLIPS> (make-instance a of A)
[a]
FuzzyCLIPS> (watch all)
FuzzyCLIPS> (modify-instance a (foo 0))
MSG >> direct-modify ED:1 (<Instance-a> <Pointer-C-0x60400005b6f0>) ;; Reference Pointer
HND >> direct-modify primary in class USER
       ED:1 (<Instance-a> <Pointer-C-0x60400005b6f0>)               ;; Should be the same as above
::= local slot foo in instance a <- 0
HND << direct-modify primary in class USER
       ED:1 (<Instance-a> <Pointer-C-0x60400005b6f0>)               ;; Should be the same as above
MSG << direct-modify ED:1 (<Instance-a> <Pointer-C-0x60400005b6f0)  ;; Should be the same as above
TRUE
FuzzyCLIPS> (unwatch all)
FuzzyCLIPS> (clear) ;; CLIPSESG Bug
FuzzyCLIPS> 
(defclass A
  (is-a USER)
  (role concrete)
  (slot one (type STRING))
  (slot two (type SYMBOL) (allowed-values TRUE FALSE) (default TRUE)))
FuzzyCLIPS> 
(definstances TEST (a1 of A) (a2 of A) (a3 of A))
FuzzyCLIPS> 
(defrule rule1
  ?obj <- (object (is-a A) (name [a1]))
  =>
  (message-modify-instance ?obj (one "a") (two FALSE))
  (send ?obj print))
FuzzyCLIPS> 
(defrule rule2
  ?obj <- (object (is-a A) (name [a2]))
  =>
  (message-modify-instance ?obj (two FALSE) (one "a"))
  (send ?obj print))
FuzzyCLIPS> 
(defrule rule3
  ?obj <- (object (is-a A) (name [a3]))
  =>
  (modify-instance ?obj (two FALSE) (one "a"))
  (send ?obj print))
FuzzyCLIPS> (reset)
FuzzyCLIPS> (run)
[a3] of A
(one "a")
(two FALSE)
[a2] of A
(one "a")
(two FALSE)
[a1] of A
(one "a")
(two FALSE)
FuzzyCLIPS> (clear) ;; CLIPSESG Crash Bug
FuzzyCLIPS> 
(defrule bug
   (dummy)
   (foo ?x)
   (not (and (huge ?x)
             (not (and (test (eq ?x 1))
                       (bar ?x)))))
   =>)
FuzzyCLIPS> (reset)
FuzzyCLIPS> (assert (bar 1))
<Fact-1>
FuzzyCLIPS> (assert (huge 1))
<Fact-2>
FuzzyCLIPS> (clear) ; SourceForge Bug
FuzzyCLIPS> 
(defclass FOO
   (is-a USER)
   (slot _foo (default ?NONE)))
FuzzyCLIPS> (make-instance foo1 of FOO)
[INSMNGR14] Override required for slot '_foo' in instance [foo1].
[PRCCODE4] Execution halted during the actions of message-handler 'init' primary in class 'USER'
[INSMNGR8] An error occurred during the initialization of instance [foo1].
FALSE
FuzzyCLIPS> (make-instance foo2 of FOO (_foo))
[INSMNGR14] Override required for slot '_foo' in instance [foo2].
[PRCCODE4] Execution halted during the actions of message-handler 'put-_foo' primary in class 'FOO'
FALSE
FuzzyCLIPS> (clear) ; SourceForge Assert/Clear Bug
FuzzyCLIPS> (defrule foo (a ?x&:(progn (clear) TRUE)) =>)
FuzzyCLIPS> (assert (a 1))
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
<Fact-1>
FuzzyCLIPS> (send [initial-object] delete)
[MSGPASS2] No such instance [initial-object] in function 'send'.
FALSE
FuzzyCLIPS> (assert (a 2))
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
<Fact-2>
FuzzyCLIPS> (clear)
FuzzyCLIPS> (assert (a (clear)))
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
<Fact-1>
FuzzyCLIPS> (clear)
FuzzyCLIPS> (deffacts FOO (foo bar) (foo (clear)))
FuzzyCLIPS> (reset)
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
FuzzyCLIPS> (clear)
FuzzyCLIPS> (assert-string "(a (clear))")
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
<Fact-1>
FuzzyCLIPS> (clear)
FuzzyCLIPS> (deftemplate foo (multislot x))
FuzzyCLIPS> (assert (foo (x (clear) 1)))
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
<Fact-1>
FuzzyCLIPS> (facts)
f-1     (foo (x 1)) CF 1.00 
For a total of 1 fact.
FuzzyCLIPS> (modify 1 (x (clear) 2))
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
<Fact-1>
FuzzyCLIPS> (facts)
f-1     (foo (x 2)) CF 1.00 
For a total of 1 fact.
FuzzyCLIPS> (clear) ; SourceForge Bug
FuzzyCLIPS> 
(defmodule FOO
   (export ?ALL))
FuzzyCLIPS>    
(defclass FOO::DUMMY 
   (is-a USER)
   (slot foo))
FuzzyCLIPS>    
(defmodule BAR
   (import FOO ?ALL))
FuzzyCLIPS> 
(defclass BAR::BAR 
   (is-a USER)
   (slot bar (allowed-classes DUMMY)))
FuzzyCLIPS> (set-dynamic-constraint-checking TRUE)
FALSE
FuzzyCLIPS> 
(make-instance b of BAR
   (bar (make-instance f of DUMMY)))
[b]
FuzzyCLIPS> (set-dynamic-constraint-checking FALSE)   
TRUE
FuzzyCLIPS> (clear) ; CLIPSESG Bug
FuzzyCLIPS> 
(deffunction generate (?a ?c)
   (str-cat ?a ?c))
FuzzyCLIPS> 
(deffunction gm1 ()
   (progn$ (?ctype (create$ aaa))
      (generate 2 ?ctype)))
FuzzyCLIPS> 
(deffunction gm2 ()
   (bind ?ctype aaa)
   (generate 2 ?ctype))
FuzzyCLIPS> (gm1)
"2aaa"
FuzzyCLIPS> (gm2)
"2aaa"
FuzzyCLIPS>    
(clear) ; Dangling constructs
FuzzyCLIPS> 
(progn
   (clear)
   (build "(defrule foo (count) =>)")
   (assert (count)))
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
<Fact-1>
FuzzyCLIPS> (deftemplate blah (slot x))
FuzzyCLIPS> 
(progn 
   (clear)
   (assert (blah (x 1))))
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
<Fact-2>
FuzzyCLIPS>    
(defclass BLAH (is-a USER) (slot x))
FuzzyCLIPS> 
(progn
   (clear)
   (make-instance of BLAH (x 1)))
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
[gen509]
FuzzyCLIPS> (deffunction yabbo () (printout t "Hello, world!" crlf))
FuzzyCLIPS> 
(progn (clear)
       (yabbo))
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
Hello, world!
FuzzyCLIPS> 
(defmethod blah ((?x STRING))
   (printout t ?x crlf))
FuzzyCLIPS> 
(progn (clear)
       (blah "Hello, world!"))
[CONSTRCT1] Some constructs are still in use. Clear cannot continue.
Hello, world!
FuzzyCLIPS> (clear) ; Sourceforge bug
FuzzyCLIPS> (funcall str-cat)
[ARGACCES1] Function 'str-cat' expected at least 1 argument.
FALSE
FuzzyCLIPS> 
(deffunction bar1 (?func)
   (bind $?a (create$))
   (funcall ?func (expand$ $?a)))
FuzzyCLIPS> (bar1 "str-cat")
[ARGACCES1] Function 'str-cat' expected at least 1 argument.
FALSE
FuzzyCLIPS> (clear)
FuzzyCLIPS> 
(defclass BOO (is-a USER)
   (multislot foo (cardinality -1 0)))

[CSTRNPSR6] Minimum 'cardinality' value must be greater than or equal to zero.

ERROR:
(defclass MAIN::BOO
   (is-a USER)
   (multislot foo
      (cardinality -1
FuzzyCLIPS>    
(defclass BOO (is-a USER)
   (multislot foo (cardinality 0 -3)))

[CSTRNPSR2] Minimum 'cardinality' value must be less than or equal to the maximum 'cardinality' value.

ERROR:
(defclass MAIN::BOO
   (is-a USER)
   (multislot foo
      (cardinality 0 -3)
FuzzyCLIPS> (clear) ; Continuous operation issue
FuzzyCLIPS> (defglobal ?*num* = 37)
FuzzyCLIPS> (defglobal ?*val* = FALSE)
FuzzyCLIPS> 
(deffunction get-number ()
   (bind ?*num* (+ ?*num* 1)))
FuzzyCLIPS> 
(deffunction muck ()
   (bind ?*val* (create$ (get-number) (get-number))))
FuzzyCLIPS> 
(deffacts startup
   (muck-around))
FuzzyCLIPS>    
(defrule muck-around
   ?f0 <- (muck-around)
   =>
   (retract ?f0) 
   (muck)
   (assert (muck-around)))
FuzzyCLIPS> (reset)
FuzzyCLIPS> (run 1)
FuzzyCLIPS> ?*val*
(38 39)
FuzzyCLIPS> (clear) ; SourceForge Crash Bug
FuzzyCLIPS> 
(deftemplate table
   (slot table-id (type INTEGER)))
FuzzyCLIPS> 
(deftemplate modeler-instance
   (slot class (type SYMBOL) (default ?NONE))
   (slot id (type SYMBOL) (default ?NONE)))
FuzzyCLIPS> 
(deftemplate table-modeler-binding
   (slot modeler (type SYMBOL))
   (slot table-id))
FuzzyCLIPS> 
(deffacts start
   (table (table-id 100002))
   (table (table-id 100003))
   (modeler-instance (class TIME-PROFILER) (id gen4)) 
   (table-modeler-binding (modeler gen4) (table-id 100003)) 
   (modeler-instance (class TIME-PROFILER) (id gen6))
   (table-modeler-binding (modeler gen6) (table-id 100002)))
FuzzyCLIPS> 
(defrule mark   
   (modeler-instance (id ?m1))
   (modeler-instance (id ?m2&~?m1))
   (not (and (table-modeler-binding (modeler ?m1) (table-id ?t1))
             (table-modeler-binding (modeler ?m2) (table-id ?t2&~?t1))
             (table (table-id ?t1))
             (table (table-id ?t2))))
   (not (and
             (table-modeler-binding (modeler ?m2) (table-id ?t3))
             (table-modeler-binding (modeler ?m1) (table-id ?t4&~?t3))
             (table (table-id ?t4))))
   =>)
FuzzyCLIPS> 
(defrule remove 
   =>)
FuzzyCLIPS> (reset)
FuzzyCLIPS> (matches mark)
Matches for Pattern 1
f-3
f-5
Matches for Pattern 2
f-3
f-5
Matches for Pattern 3
f-4
f-6
Matches for Pattern 4
f-4
f-6
Matches for Pattern 5
f-1
f-2
Matches for Pattern 6
f-1
f-2
Matches for Pattern 7
f-4
f-6
Matches for Pattern 8
f-4
f-6
Matches for Pattern 9
f-1
f-2
Partial matches for CEs 1 - 2
f-3,f-5
f-5,f-3
Partial matches for CEs 1 - 3
f-5,f-3,f-6
f-3,f-5,f-4
Partial matches for CEs 1 - 4
f-5,f-3,f-6,f-4
f-3,f-5,f-4,f-6
Partial matches for CEs 1 - 5
f-3,f-5,f-4,f-6,f-2
f-5,f-3,f-6,f-4,f-1
Partial matches for CEs 1 - 6
f-5,f-3,f-6,f-4,f-1,f-2
f-3,f-5,f-4,f-6,f-2,f-1
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6)
 None
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7)
 None
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7) - 5 (P8)
 None
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7) - 6 (P9)
 None
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7 - P9)
 None
Activations
 None
(18 10 0)
FuzzyCLIPS> (retract 2)
FuzzyCLIPS> (matches mark)
Matches for Pattern 1
f-3
f-5
Matches for Pattern 2
f-3
f-5
Matches for Pattern 3
f-4
f-6
Matches for Pattern 4
f-4
f-6
Matches for Pattern 5
f-1
Matches for Pattern 6
f-1
Matches for Pattern 7
f-4
f-6
Matches for Pattern 8
f-4
f-6
Matches for Pattern 9
f-1
Partial matches for CEs 1 - 2
f-3,f-5
f-5,f-3
Partial matches for CEs 1 - 3
f-5,f-3,f-6
f-3,f-5,f-4
Partial matches for CEs 1 - 4
f-5,f-3,f-6,f-4
f-3,f-5,f-4,f-6
Partial matches for CEs 1 - 5
f-5,f-3,f-6,f-4,f-1
Partial matches for CEs 1 - 6
 None
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6)
f-5,f-3,*
f-3,f-5,*
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7)
f-3,f-5,*,f-6
f-5,f-3,*,f-4
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7) - 5 (P8)
f-5,f-3,*,f-4,f-6
f-3,f-5,*,f-6,f-4
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7) - 6 (P9)
f-5,f-3,*,f-4,f-6,f-1
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7 - P9)
f-3,f-5,*,*
Activations
f-3,f-5,*,*
(15 15 1)
FuzzyCLIPS> (retract 3)
FuzzyCLIPS> (matches mark)
Matches for Pattern 1
f-5
Matches for Pattern 2
f-5
Matches for Pattern 3
f-4
f-6
Matches for Pattern 4
f-4
f-6
Matches for Pattern 5
f-1
Matches for Pattern 6
f-1
Matches for Pattern 7
f-4
f-6
Matches for Pattern 8
f-4
f-6
Matches for Pattern 9
f-1
Partial matches for CEs 1 - 2
 None
Partial matches for CEs 1 - 3
 None
Partial matches for CEs 1 - 4
 None
Partial matches for CEs 1 - 5
 None
Partial matches for CEs 1 - 6
 None
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6)
 None
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7)
 None
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7) - 5 (P8)
 None
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7) - 6 (P9)
 None
Partial matches for CEs 1 (P1) - 2 (P2) , 3 (P3 - P6) , 4 (P7 - P9)
 None
Activations
 None
(13 0 0)
FuzzyCLIPS> (clear)
FuzzyCLIPS> (clear) ; DR #882
FuzzyCLIPS> (watch activations)
FuzzyCLIPS> 
(defrule if 
   (not (and (not (and (A) (B)))
             (C)))
   (not (and (SAD ?v)
             (SAD ?v)))
   =>)
==> Activation 0      if: *,*
FuzzyCLIPS> (assert (SAD 2))
<== Activation 0      if: *,*
<Fact-1>
FuzzyCLIPS> (clear)
FuzzyCLIPS> 
(defrule if 
    (and  
        (exists 
            (SAD T ?tx1 T01 ?t01)
            (SAD T ?tx1 T02 ?t02)
            (or  
                (test (not (not (str-index  "ABCD" ?t01)))) 
                (test (not (not (str-index  "ABCD" ?t02)))))) 
        (exists 
            (SAD G ?gx1 G02N ?g02n)
            (and  
                (test (eq (str-index  "9900" ?g02n) 1)) 
                (exists 
                    (SAD T ?tx2 T08 ?t08)
                    (SAD G ?gx1 G01 ?g01)
                    (or  
                        (test (<= ?t08 0)) 
                        (test (= ?t08 ?g01)))))))
   =>)
FuzzyCLIPS> (assert (SAD G 2 G01 2))
<Fact-1>
FuzzyCLIPS> (assert (SAD G 2 G02N "99009000"))
<Fact-2>
FuzzyCLIPS> (assert (SAD T 3 T01 "ABCD XYX"))
<Fact-3>
FuzzyCLIPS> (assert (SAD T 3 T02 "XYZ CDE"))
<Fact-4>
FuzzyCLIPS> (assert (SAD T 3 T08 2))
==> Activation 0      if: *,*
<Fact-5>
FuzzyCLIPS> (unwatch activations)
FuzzyCLIPS> (clear) ; Matches issue
FuzzyCLIPS> (defmodule MAIN (export ?ALL))
FuzzyCLIPS> (deffacts start (a) (b) (c))
FuzzyCLIPS> (defmodule A (import MAIN ?ALL))
FuzzyCLIPS> (defrule A::foo (a) =>)
FuzzyCLIPS> (defmodule B (import MAIN ?ALL))
FuzzyCLIPS> (defrule B::foo (b) =>)
FuzzyCLIPS> (defmodule C (import MAIN ?ALL))
FuzzyCLIPS> (defrule C::foo (c) =>)
FuzzyCLIPS> (reset)
FuzzyCLIPS> (matches A::foo)
Matches for Pattern 1
f-1
Activations
f-1
(1 0 1)
FuzzyCLIPS> (matches B::foo)
Matches for Pattern 1
f-2
Activations
f-2
(1 0 1)
FuzzyCLIPS> (matches C::foo)
Matches for Pattern 1
f-3
Activations
f-3
(1 0 1)
FuzzyCLIPS> (set-current-module MAIN)
MAIN
FuzzyCLIPS> (matches A::foo)
Matches for Pattern 1
f-1
Activations
f-1
(1 0 1)
FuzzyCLIPS> (clear) ; SourceForge Bug
FuzzyCLIPS> 
(defrule bug 
   (A)
   (B ?cot)     
   (not (and (X)  
             (C ?cot)))
   (not (and (D ?cot) 
             (not (Z))))
   =>)
FuzzyCLIPS> (watch activations)
FuzzyCLIPS> (assert (B R))
<Fact-1>
FuzzyCLIPS> (assert (B C))
<Fact-2>
FuzzyCLIPS> (assert (D C))
<Fact-3>
FuzzyCLIPS> (assert (A)))
==> Activation 0      bug: f-4,f-1,*,*
<Fact-4>
FuzzyCLIPS> (agenda)
0      bug: f-4,f-1,*,*
For a total of 1 activation.
FuzzyCLIPS> (unwatch activations)
FuzzyCLIPS> (clear) ; SourceForge Bug
FuzzyCLIPS> (deftemplate C (slot x))
FuzzyCLIPS> (deftemplate D (slot x))
FuzzyCLIPS> 
(defrule if ""
    (not 
         (and 
              (not 
                   (not 
                        (and (not (and (W) 
                                       (X)))
                             (not (and (Y) 
                                       (Z)))
                        )
                   )  
              )
              (C (x ?ix_t))
              (D (x ?ix_t))
         ) 
    )
   =>)
FuzzyCLIPS> (assert (C (x 1)))
<Fact-1>
FuzzyCLIPS> (clear) ; Memory leak
FuzzyCLIPS> (deftemplate TAG (multislot attributes)))
FuzzyCLIPS> (assert (TAG))
<Fact-1>
FuzzyCLIPS> (modify 1 (attributes (create$)))
<Fact-1>
FuzzyCLIPS> (clear) ; Load Crash
FuzzyCLIPS> 
(defrule bug
   (X ?a)
   (Y ?b)
   (not (and (not (and (A ?a)      
                       (B ?b)))    
             (test (eq ?a ?b))))  
   (Z)
   =>)
FuzzyCLIPS> (assert (Z)) 
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (X 1))
<Fact-2>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (Y 2))
<Fact-3>
FuzzyCLIPS> (agenda)
0      bug: f-2,f-3,*,f-1
For a total of 1 activation.
FuzzyCLIPS> (assert (X 2))
<Fact-4>
FuzzyCLIPS> (agenda)
0      bug: f-2,f-3,*,f-1
For a total of 1 activation.
FuzzyCLIPS> (assert (Y 1))
<Fact-5>
FuzzyCLIPS> (agenda)
0      bug: f-4,f-5,*,f-1
0      bug: f-2,f-3,*,f-1
For a total of 2 activations.
FuzzyCLIPS> (assert (A 1))
<Fact-6>
FuzzyCLIPS> (agenda)
0      bug: f-4,f-5,*,f-1
0      bug: f-2,f-3,*,f-1
For a total of 2 activations.
FuzzyCLIPS> (assert (B 2))
<Fact-7>
FuzzyCLIPS> (agenda)
0      bug: f-4,f-5,*,f-1
0      bug: f-2,f-3,*,f-1
For a total of 2 activations.
FuzzyCLIPS> (assert (A 2))
<Fact-8>
FuzzyCLIPS> (agenda)
0      bug: f-4,f-3,*,f-1
0      bug: f-4,f-5,*,f-1
0      bug: f-2,f-3,*,f-1
For a total of 3 activations.
FuzzyCLIPS> (assert (B 1))
<Fact-9>
FuzzyCLIPS> (agenda)
0      bug: f-2,f-5,*,f-1
0      bug: f-4,f-3,*,f-1
0      bug: f-4,f-5,*,f-1
0      bug: f-2,f-3,*,f-1
For a total of 4 activations.
FuzzyCLIPS> (clear) ; Load Crash
FuzzyCLIPS> 
(defrule bug
    (Surname ?surname_1)
    (PersonSurname ?PersonSurname_1)
    (exists 
        (or  
            (and  
                (exists 
                    (Surname ?Surname_2)
                    (LVAR two ?two)
                    (test (eq ?Surname_2 ?two))) 
                (test (eq ?surname_1 ?PersonSurname_1))) 
            (and  
                (exists 
                    (Surname ?Surname_3)
                    (LVAR three ?three)
                    (test (eq ?Surname_3 ?three))))))
=>)
FuzzyCLIPS> (clear) ; DR0882
FuzzyCLIPS> 
(defrule foo
   (logical (test (> 4 3))
            (a))
   =>
   (assert (b)))
FuzzyCLIPS> (watch facts)
FuzzyCLIPS> (assert (a))
==> f-1     (a) CF 1.00 
<Fact-1>
FuzzyCLIPS> (run)
==> f-2     (b) CF 1.00 
FuzzyCLIPS> (retract 1)
<== f-1     (a) CF 1.00 
<== f-2     (b) CF 1.00 
FuzzyCLIPS> (unwatch facts) 
FuzzyCLIPS> (clear) ; CLIPSESG Bug
FuzzyCLIPS> (watch activations)
FuzzyCLIPS> (defclass A (is-a USER))
FuzzyCLIPS> 
(defrule crash
  (not (object (is-a A)))
  (object (is-a A))
  =>)
FuzzyCLIPS> (make-instance test1 of A)
==> Activation 0      crash: *,[test1]
<== Activation 0      crash: *,[test1]
[test1]
FuzzyCLIPS> (unmake-instance [test1])
TRUE
FuzzyCLIPS> (run)
FuzzyCLIPS> (clear)
FuzzyCLIPS> (deftemplate A)
FuzzyCLIPS> 
(defrule crash
  (not (A))
  (A)
  =>)
FuzzyCLIPS> (assert (A))
==> Activation 0      crash: *,f-1
<== Activation 0      crash: *,f-1
<Fact-1>
FuzzyCLIPS> (retract 1)
FuzzyCLIPS> (unwatch activations)
FuzzyCLIPS> (clear) ; CLIPSESG Bug
FuzzyCLIPS> (watch activations)
FuzzyCLIPS> 
(defclass A
  (is-a USER)
  (slot a))
FuzzyCLIPS> 
(defrule test
  (not (object (is-a A) (a 1)))
  (object (is-a A) (a 1))
  =>)
FuzzyCLIPS> (make-instance [a1] of A (a 1))
==> Activation 0      test: *,[a1]
<== Activation 0      test: *,[a1]
[a1]
FuzzyCLIPS> (modify-instance [a1] (a 2))
TRUE
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (unwatch activations)
FuzzyCLIPS> (clear) ; SourceForge Ticket #14
FuzzyCLIPS> (watch facts)
FuzzyCLIPS> (deftemplate foo (multislot x))
FuzzyCLIPS> (deffacts start (foo (x 1 2)) (foo (x a)))
FuzzyCLIPS> (reset)
==> f-1     (foo (x 1 2)) CF 1.00 
==> f-2     (foo (x a)) CF 1.00 
FuzzyCLIPS> 
(do-for-fact ((?f foo)) TRUE
  (retract ?f)
  (bind ?x ?f:x)
  (assert (foo (x $?x 3))))
<== f-1     (foo (x 1 2)) CF 1.00 
[PRNTUTIL12] The variable/slot reference ?f:x cannot be resolved because the referenced fact f-1 has been retracted.
FALSE
FuzzyCLIPS> (reset)
<== f-2     (foo (x a)) CF 1.00 
==> f-1     (foo (x 1 2)) CF 1.00 
==> f-2     (foo (x a)) CF 1.00 
FuzzyCLIPS> (do-for-all-facts ((?f foo)) TRUE
  (retract ?f)
  (printout t ?f " " ?f:x crlf))
<== f-1     (foo (x 1 2)) CF 1.00 
<Fact-1> [PRNTUTIL12] The variable/slot reference ?f:x cannot be resolved because the referenced fact f-1 has been retracted.
FALSE
FuzzyCLIPS>   
(unwatch facts)
FuzzyCLIPS> (clear)  
FuzzyCLIPS> (watch instances)
FuzzyCLIPS> (watch slots)
FuzzyCLIPS> (defclass FOO (is-a USER) (multislot x))
FuzzyCLIPS> 
(definstances start
   ([f1] of FOO (x 1 2))
   ([f2] of FOO (x a)))
FuzzyCLIPS> (reset)
==> instance [f1] of FOO
::= local slot x in instance f1 <- (1 2)
==> instance [f2] of FOO
::= local slot x in instance f2 <- (a)
FuzzyCLIPS> 
(do-for-instance ((?f FOO)) TRUE
  (send ?f delete)
  (bind ?x ?f:x)
  (make-instance [f3] of FOO (x $?x 3)))
<== instance [f1] of FOO
[PRNTUTIL15] The variable/slot reference ?f:x cannot be resolved because the referenced instance [f1] has been deleted.
FALSE
FuzzyCLIPS> (reset)
<== instance [f2] of FOO
==> instance [f1] of FOO
::= local slot x in instance f1 <- (1 2)
==> instance [f2] of FOO
::= local slot x in instance f2 <- (a)
FuzzyCLIPS> 
(do-for-all-instances ((?f FOO)) TRUE
  (send ?f delete)
  (printout t ?f " " ?f:x crlf))
<== instance [f1] of FOO
[f1] [PRNTUTIL15] The variable/slot reference ?f:x cannot be resolved because the referenced instance [f1] has been deleted.
FALSE
FuzzyCLIPS> (unwatch all)
FuzzyCLIPS> (clear) ; Indentation depth overflow
FuzzyCLIPS> (defrule foo
   =>
   (if (eq 3 3)
      then
      (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then
      (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then
      (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then
      (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then
      (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then
      (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then
      (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then
      (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then
      (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then
      (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then (if (eq 3 3) then
      (if (eq 3 3) then 3)))))))))))))))))))))))))))))))))))))))))))
FuzzyCLIPS> (clear) ; Crash bug
FuzzyCLIPS> 
(deftemplate foobar
  (slot foo)
  (multislot bar))
FuzzyCLIPS> (assert (foobar)))
<Fact-1>
FuzzyCLIPS> (modify 1 (dummy TRUE))

[TMPLTDEF1] Invalid slot 'dummy' not defined in corresponding deftemplate 'foobar'.
FALSE
FuzzyCLIPS> (clear) ; Logical CE Issue
FuzzyCLIPS> (deftemplate A (slot val))
FuzzyCLIPS> (deftemplate B)
FuzzyCLIPS> (deftemplate C)
FuzzyCLIPS> (deftemplate D)
FuzzyCLIPS> 
(deffacts infinite_setup
  (A (val 1)))
FuzzyCLIPS> 
(defrule infinite_rule
  (logical
    (A (val ?val))
    (not (and (B) (C)))
    (test (eq ?val 1)))
  (not (D))
  =>
  (assert (D)))
FuzzyCLIPS> 
(reset)
FuzzyCLIPS> (watch rules)
FuzzyCLIPS> (watch facts)
FuzzyCLIPS> (watch activations)
FuzzyCLIPS> (run 1)
FIRE    1 infinite_rule: f-1,*,*
==> f-2     (D) CF 1.00 
FuzzyCLIPS> (unwatch all)
FuzzyCLIPS> (clear)
FuzzyCLIPS> (deftemplate A (slot val))
FuzzyCLIPS> (deftemplate B)
FuzzyCLIPS> (deftemplate C)
FuzzyCLIPS> (deftemplate D)
FuzzyCLIPS> 
(deffacts infinite_setup
  (A (val 1)))
FuzzyCLIPS> 
(defrule infinite_rule
  (logical
    (A (val ?val))
    (not (and (B) (C)))
    (test (eq ?val 1))
    (not (D)))
  =>
  (assert (D)))
FuzzyCLIPS> 
(reset)
FuzzyCLIPS> (watch rules)
FuzzyCLIPS> (watch facts)
FuzzyCLIPS> (watch activations)
FuzzyCLIPS> (run 1)
FIRE    1 infinite_rule: f-1,*,*
==> f-2     (D) CF 1.00 
<== f-2     (D) CF 1.00 
==> Activation 0      infinite_rule: f-1,*,*
FuzzyCLIPS> (unwatch all)
FuzzyCLIPS> (clear) ; Funcall module specifier #1
FuzzyCLIPS> 
(defmodule M
  (export deffunction ?ALL))
FuzzyCLIPS> (deffunction foo (?x) (printout t ?x " in M" crlf))
FuzzyCLIPS> (defmodule MAIN)
FuzzyCLIPS> (deffunction foo (?x) (printout t ?x " in MAIN" crlf))
FuzzyCLIPS> (funcall foo bar)
bar in MAIN
FuzzyCLIPS> (funcall M::foo baz)
baz in M
FuzzyCLIPS> (funcall MAIN::foo baz)
baz in MAIN
FuzzyCLIPS> (clear) ; Funcall module specifier #2
FuzzyCLIPS> 
(defmodule M
  (export deffunction ?ALL))
FuzzyCLIPS> (deffunction foo (?x) (funcall ?x))
FuzzyCLIPS> (deffunction bar () (printout t "bar in M" crlf))
FuzzyCLIPS> (defmodule MAIN (export deffunction ?ALL))
FuzzyCLIPS> (deffunction bar () (printout t "bar in MAIN" crlf))
FuzzyCLIPS> (M::foo bar)
bar in M
FuzzyCLIPS> (M::foo MAIN::bar)
bar in MAIN
FuzzyCLIPS> (M::foo M::bar)
bar in M
FuzzyCLIPS> (clear) ; Funcall module specifier #3
FuzzyCLIPS> 
(defmodule M
  (export deffunction ?ALL))
FuzzyCLIPS> (deffunction foo (?x) (funcall ?x))
FuzzyCLIPS> (deffunction bar () (printout t "bar in M" crlf))
FuzzyCLIPS> (defmodule MAIN)
FuzzyCLIPS> (deffunction bar () (printout t "bar in MAIN" crlf))
FuzzyCLIPS> (M::foo bar)
bar in M
FuzzyCLIPS> (M::foo MAIN::bar)
[ARGACCES2] Function 'funcall' expected argument #1 to be of type function, deffunction, or generic function name.
FALSE
FuzzyCLIPS> (M::foo M::bar)
bar in M
FuzzyCLIPS> (clear) ; Foreach bug
FuzzyCLIPS> (foreach ?a (create$ a b c)
            (foreach ?b (create$ x y) (printout t ?a " " ?b crlf)))
a x
a y
b x
b y
c x
c y
FuzzyCLIPS> (progn$ (?a (create$ a b c)) 
            (progn$ (?b (create$ x y)) (printout t ?a " " ?b crlf)))
a x
a y
b x
b y
c x
c y
FuzzyCLIPS> (clear)
FuzzyCLIPS> (defglobal ?*crash* = (create$ 1 2 3 etc))
FuzzyCLIPS> (bind ?*crash* (rest$ ?*crash*))
(2 3 etc)
FuzzyCLIPS> (clear) ; SourceForge Ticket #49
FuzzyCLIPS> (::)

[EXPRNPSR7] Missing module name for '::'.
FuzzyCLIPS> (clear) ; SourceForge Ticket #54 Extraneous Module Specifier
FuzzyCLIPS> (defmodule EXTRANEOUS::COMPUTE)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for module specifier.

ERROR:
(defmodule EXTRANEOUS::COMPUTE
FuzzyCLIPS> (deftemplate MAIN::EXTRANEOUS::point)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for module specifier.

ERROR:
(deftemplate MAIN::EXTRANEOUS::point
FuzzyCLIPS> (deffacts MAIN::EXTRANEOUS::points)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for module specifier.

ERROR:
(deffacts MAIN::EXTRANEOUS::points
FuzzyCLIPS> (defrule MAIN::EXTRANEOUS::find-point =>)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for module specifier.

ERROR:
(defrule MAIN::EXTRANEOUS::find-point
FuzzyCLIPS> (defclass MAIN::EXTRANEOUS::POINT (is-a USER))

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for module specifier.

ERROR:
(defclass MAIN::EXTRANEOUS::POINT
FuzzyCLIPS> (defclass MAIN::POINT (is-a USER))
FuzzyCLIPS> (defmessage-handler MAIN::EXTRANEOUS::POINT add-points ())

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for module specifier.

ERROR:
(defmessage-handler MAIN::EXTRANEOUS::POINT
FuzzyCLIPS> (definstances MAIN::EXTRANEOUS::points)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for module specifier.

ERROR:
(definstances MAIN::EXTRANEOUS::points
FuzzyCLIPS> (deffunction MAIN::EXTRANEOUS::add-point (?x ?y))

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for module specifier.

ERROR:
(deffunction MAIN::EXTRANEOUS::add-point
FuzzyCLIPS> (defgeneric MAIN::EXTRANEOUS::add-point)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for module specifier.

ERROR:
(defgeneric MAIN::EXTRANEOUS::add-point
FuzzyCLIPS> (defmethod MAIN::EXTRANEOUS::add-point ((?x FLOAT) (?y FLOAT)))

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for module specifier.

ERROR:
(defmethod MAIN::EXTRANEOUS::add-point
FuzzyCLIPS> (clear) ; bsave-instances external-address issue
FuzzyCLIPS> 
(defclass EXPERIMENT 
   (is-a USER)
   (slot fa (type FACT-ADDRESS))
   (slot ia (type INSTANCE-ADDRESS))
   (slot ea (type EXTERNAL-ADDRESS)))
FuzzyCLIPS>    
(make-instance e1 of EXPERIMENT
   (fa (assert (b)))
   (ia (instance-address(make-instance e2 of EXPERIMENT))))
[e1]
FuzzyCLIPS> (bsave-instances "Temp//experiment.bins")
2
FuzzyCLIPS> (reset)
FuzzyCLIPS> (bload-instances "Temp//experiment.bins")
2
FuzzyCLIPS> (send [e1] print)
[e1] of EXPERIMENT
(fa <Dummy Fact>)
(ia [e2])
(ea <Pointer-C-0x0>)
FuzzyCLIPS> (send [e2] print)
[e2] of EXPERIMENT
(fa <Dummy Fact>)
(ia [Dummy Instance])
(ea <Pointer-C-0x0>)
FuzzyCLIPS> (clear) ; Local variables cannot be accessed bug
FuzzyCLIPS> 
(deftemplate hello
  (slot self (type FACT-ADDRESS)))
FuzzyCLIPS>   
(deffacts hellos
   (hello))
FuzzyCLIPS> (clear) ; Source Ticket #56
FuzzyCLIPS> 
(deftemplate maze
   (multislot open-list)
   (slot goal))
FuzzyCLIPS> 
(defrule test-1
   (maze (open-list)
         (goal ?g&nil))
   =>)
FuzzyCLIPS> 
(defrule test-2
   (maze (open-list) 
         (goal ?g&:(eq ?g nil)))
   =>)
FuzzyCLIPS> 
(defrule test-3
   (maze (open-list) 
         (goal ~nil))
   =>)
FuzzyCLIPS> (clear) ; Error line count issue
FuzzyCLIPS> (load line_error_crlf.clp)
%$
[TMPLTDEF1] line_error_crlf.clp, Line 7: Invalid slot 'z' not defined in corresponding deftemplate 'point'.

ERROR:
(deffacts MAIN::points
   (point (x 1) (y 2))
   (point (x 3) (y 4) (z

FALSE
FuzzyCLIPS> (clear)
FuzzyCLIPS> (load line_error_lf.clp)
%$
[TMPLTDEF1] line_error_lf.clp, Line 7: Invalid slot 'z' not defined in corresponding deftemplate 'point'.

ERROR:
(deffacts MAIN::points
   (point (x 1) (y 2))
   (point (x 3) (y 4) (z

FALSE
FuzzyCLIPS> (clear) ; CLIPSESG https://groups.google.com/forum/#!topic/CLIPSESG/j4fmacgmAZY
FuzzyCLIPS> 
(deftemplate example
   (slot value
      (type SYMBOL)
      (allowed-symbols FALSE TRUE)))
FuzzyCLIPS> 
(defrule attempt-to-construct-example
   ?f <- (line ?line)
   =>
   (retract ?f)
   (assert (example (value (eq ?line "")))))
FuzzyCLIPS> (clear) ; CLIPSESG https://groups.google.com/forum/#!topic/CLIPSESG/YaNnNF1xg5w
FuzzyCLIPS> 
(defclass OAV
   (is-a USER)
   (slot object)
   (slot attribute)
   (multislot values))
FuzzyCLIPS> 
(make-instance oav1 of OAV
   (object Fred)
   (attribute hobbies)
   (values reading hiking chess))
[oav1]
FuzzyCLIPS> (bsave-instances "Temp//drins.bin")
1
FuzzyCLIPS> (reset)
FuzzyCLIPS> (bload-instances "Temp//drins.bin")
1
FuzzyCLIPS> (send [oav1] print)
[oav1] of OAV
(object Fred)
(attribute hobbies)
(values reading hiking chess)
FuzzyCLIPS> (clear) ; Object pattern matching underflow
FuzzyCLIPS> 
(deftemplate range
   (slot start)
   (slot finish))
FuzzyCLIPS>              
(deftemplate sequence
   (multislot elements))
FuzzyCLIPS> (defclass container
   (is-a USER)
   (multislot contents))
FuzzyCLIPS> 
(deffacts defranges
   (range (start 2) (finish 11))
   (range (start 12) (finish 19)))
FuzzyCLIPS>           
(deffacts defsequences
   (sequence (elements 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)))
FuzzyCLIPS> 
(definstances containers
   (of container 
      (contents 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))
   (of container
      (contents)))
FuzzyCLIPS> 
(defrule eliminate-entire-range
   (range (start ?start) 
          (finish ?finish))
   (sequence (elements ?start $? ?finish))
   (object (is-a container)
           (contents $?before ?start $? ?finish $?after)
           (name ?name))
   =>
   (modify-instance ?name
      (contents $?before 
      $?after)))
FuzzyCLIPS> (reset)
FuzzyCLIPS> (run)
FuzzyCLIPS> (clear)
FuzzyCLIPS> (dribble-off)
