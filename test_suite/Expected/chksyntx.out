TRUE
FuzzyCLIPS> (batch "chksyntx.bat")
TRUE
FuzzyCLIPS> (clear)                          
FuzzyCLIPS> (check-syntax)                           
[ARGACCES1] Function 'check-syntax' expected exactly 1 argument.
FuzzyCLIPS> (check-syntax "cat" "dog")                 
[ARGACCES1] Function 'check-syntax' expected exactly 1 argument.
FuzzyCLIPS> (check-syntax 7.8)                        
[ARGACCES2] Function 'check-syntax' expected argument #1 to be of type string.
FuzzyCLIPS> (check-syntax 900)                        
[ARGACCES2] Function 'check-syntax' expected argument #1 to be of type string.
FuzzyCLIPS> (check-syntax [abc])                      
[ARGACCES2] Function 'check-syntax' expected argument #1 to be of type string.
FuzzyCLIPS> (check-syntax (create$ a x y))            
[ARGACCES2] Function 'check-syntax' expected argument #1 to be of type string.
FuzzyCLIPS> (check-syntax cat)                       
[ARGACCES2] Function 'check-syntax' expected argument #1 to be of type string.
FuzzyCLIPS> (check-syntax "dog")                    
MISSING-LEFT-PARENTHESIS
FuzzyCLIPS> (check-syntax "7")                     
MISSING-LEFT-PARENTHESIS
FuzzyCLIPS> (check-syntax "893.34")                 
MISSING-LEFT-PARENTHESIS
FuzzyCLIPS> (check-syntax "[ab]")               
MISSING-LEFT-PARENTHESIS
FuzzyCLIPS> (check-syntax "?x")                
MISSING-LEFT-PARENTHESIS
FuzzyCLIPS> (check-syntax "?*x*")      
MISSING-LEFT-PARENTHESIS
FuzzyCLIPS> (check-syntax "(facts)")                   
FALSE
FuzzyCLIPS> (check-syntax "(+ 3 4)")                
FALSE
FuzzyCLIPS> (check-syntax "(create$ a b c)")         
FALSE
FuzzyCLIPS> (check-syntax "(+ 3 (* 4 5))")   
FALSE
FuzzyCLIPS> (check-syntax "(+ a b)")
("[ARGACCES2] Function '+' expected argument #1 to be of type integer or float.
" FALSE)
FuzzyCLIPS> (check-syntax "(+ 3 4")
("
[EXPRNPSR2] Expected a constant, variable, or expression.
" FALSE)
FuzzyCLIPS> (check-syntax "(assert (x y z))")
FALSE
FuzzyCLIPS> (check-syntax "(+ 3 4) x")
EXTRANEOUS-INPUT-AFTER-LAST-PARENTHESIS
FuzzyCLIPS> (check-syntax "(defrule foo =>) x")
EXTRANEOUS-INPUT-AFTER-LAST-PARENTHESIS
FuzzyCLIPS> (deffacts a1 (x y z))
FuzzyCLIPS> (deftemplate a2 (slot r) (multislot s))
FuzzyCLIPS> (defrule a3 (x y z) =>)
FuzzyCLIPS> (defglobal ?*a4* = 9)
FuzzyCLIPS> (defmodule MAIN (export ?ALL))
FuzzyCLIPS> (defmodule a5 (import MAIN ?ALL))
FuzzyCLIPS> (set-current-module MAIN)
a5
FuzzyCLIPS> (deffunction a6 (?x) (* 2 ?x))
FuzzyCLIPS> (defgeneric a7)
FuzzyCLIPS> (defmethod a8 ((?x INTEGER)) (* 7 ?x))
FuzzyCLIPS> 
(defclass a9 (is-a USER) 
   (role concrete)
   (slot q (create-accessor read-write)))
FuzzyCLIPS> (definstances a10 (a10i of a9 (q 54)))
FuzzyCLIPS> (defmessage-handler a9 a11 (?u) (* ?self:q 3))
FuzzyCLIPS> (bsave "Temp//chksyntx.bin")
[CSTRNBIN1] WARNING: Constraints are not saved with a binary image
  when dynamic constraint checking is disabled.
  (except Fuzzy Value constraints are always saved)
TRUE
FuzzyCLIPS> (check-syntax "(deffacts a1 (foo))")
FALSE
FuzzyCLIPS> (check-syntax "(deftemplate a2 (slot g))")
FALSE
FuzzyCLIPS> (check-syntax "(defrule a3 =>)")
FALSE
FuzzyCLIPS> (check-syntax "(defglobal ?*a4* = 10)")
FALSE
FuzzyCLIPS> (check-syntax "(defmodule a5)")
FALSE
FuzzyCLIPS> (check-syntax "(deffunction a6 (?x) (* 6 ?x))")
FALSE
FuzzyCLIPS> (check-syntax "(defgeneric a7)")
FALSE
FuzzyCLIPS> (check-syntax "(defmethod a8 ((?x INTEGER)) (* 9 ?x))")
FALSE
FuzzyCLIPS> (check-syntax " (defclass a9 (is-a USER) 
   (role concrete)
   (slot w (create-accessor read-write)))")
FALSE
FuzzyCLIPS> (check-syntax "(definstances a10 (b10i of a9 (q 54)))")
FALSE
FuzzyCLIPS> (check-syntax "(defmessage-handler a9 a11 (?u) (* ?self:q 10))")
FALSE
FuzzyCLIPS> (reset)
FuzzyCLIPS> (facts)
f-1     (x y z) CF 1.00 
For a total of 1 fact.
FuzzyCLIPS> (agenda)
0      a3: f-1
For a total of 1 activation.
FuzzyCLIPS> (assert (a2 (r 2) (s 1 3)))
<Fact-2>
FuzzyCLIPS> (instances)
[a10i] of a9
For a total of 1 instance.
FuzzyCLIPS> ?*a4*
9
FuzzyCLIPS> (list-deftemplates a5)
FuzzyCLIPS> (a6 2)
4
FuzzyCLIPS> (a8 3)
21
FuzzyCLIPS> (send [a10i] a11 3)
162
FuzzyCLIPS> (check-syntax "(deffacts b1 (foo))")
FALSE
FuzzyCLIPS> (check-syntax "(deftemplate b2 (slot g))")
FALSE
FuzzyCLIPS> (check-syntax "(defrule b3 =>)")
FALSE
FuzzyCLIPS> (check-syntax "(defglobal ?*b4* = 10)")
FALSE
FuzzyCLIPS> (check-syntax "(defmodule b5)")
FALSE
FuzzyCLIPS> (check-syntax "(deffunction b6 (?x) (* 6 ?x))")
FALSE
FuzzyCLIPS> (check-syntax "(defgeneric b7)")
FALSE
FuzzyCLIPS> (check-syntax "(defmethod b8 ((?x INTEGER)) (* 9 ?x))")
FALSE
FuzzyCLIPS> 
(check-syntax " (defclass b9 (is-a USER) 
   (role concrete)
   (slot w (create-accessor read-write)))")
FALSE
FuzzyCLIPS> (check-syntax "(definstances b10 (c10i of a9 (q 54)))")
FALSE
FuzzyCLIPS> (check-syntax "(defmessage-handler a9 b11 (?u) (* ?self:q 10))")
FALSE
FuzzyCLIPS> 
(check-syntax "(deffacts c1 foo))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for RHS patterns.

ERROR:
(deffacts MAIN::c1
   foo
" FALSE)
FuzzyCLIPS> (check-syntax "(deftemplate c2 slot g))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for deftemplate.

ERROR:
(deftemplate MAIN::c2
   slot
" FALSE)
FuzzyCLIPS> (check-syntax "(defrule c3)")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defrule.

ERROR:
(defrule MAIN::c3)
" FALSE)
FuzzyCLIPS> (check-syntax "(defglobal ?*c4* 10)")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defglobal.

ERROR:
(defglobal MAIN ?*c4* 10
" FALSE)
FuzzyCLIPS> (check-syntax "(defmodule c5 (x))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defmodule.

ERROR:
(defmodule c5
   (x
" FALSE)
FuzzyCLIPS> (check-syntax "(deffunction c6 (?x (* 6 ?x))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for parameter list.

ERROR:
(deffunction MAIN::c6
   (?x (
" FALSE)
FuzzyCLIPS> (check-syntax "(defgeneric c7 (y))")
("[GENRCPSR1] Expected ')' to complete defgeneric.

ERROR:
(defgeneric MAIN::c7
   (
" FALSE)
FuzzyCLIPS> (check-syntax "(defmethod c8 (?x INTEGER)) (* 9 ?x))")
("[GENRCPSR9] Expected a variable or '(' for parameter specification.

ERROR:
(defmethod MAIN::c8
   (?x
    INTEGER
" FALSE)
FuzzyCLIPS> 
(check-syntax " (defclass c9 (is-a USER) 
   (role bogus)
   (slot w (create-accessor read-write)))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defclass.

ERROR:
(defclass MAIN::c9
   (is-a USER)
   (role bogus
" FALSE)
FuzzyCLIPS> (check-syntax "(definstances c10 c10i of a9 (q 54)))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for definstances.

ERROR:
(definstances MAIN::c10
   c10i
" FALSE)
FuzzyCLIPS> (check-syntax "(defmessage-handler a9 c11 ?u) (* ?self:q 10))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defmessage-handler.

ERROR:
(defmessage-handler MAIN::a9 c11 ?u 
" FALSE)
FuzzyCLIPS> (list-deffacts)
a1
For a total of 1 deffacts.
FuzzyCLIPS> (list-deftemplates)
x
a2
For a total of 2 deftemplates.
FuzzyCLIPS> (list-defrules)
a3
For a total of 1 defrule.
FuzzyCLIPS> (list-defglobals)
a4
For a total of 1 defglobal.
FuzzyCLIPS> (list-defmodules)
MAIN
a5
For a total of 2 defmodules.
FuzzyCLIPS> (list-deffunctions)
a6
For a total of 1 deffunction.
FuzzyCLIPS> (list-defgenerics)
a7
a8
For a total of 2 defgenerics.
FuzzyCLIPS> (list-defmethods)

a8 #1  (INTEGER)
For a total of 1 method.
FuzzyCLIPS> (list-defclasses)
FLOAT
INTEGER
SYMBOL
STRING
MULTIFIELD
EXTERNAL-ADDRESS
FACT-ADDRESS
INSTANCE-ADDRESS
INSTANCE-NAME
FUZZY-VALUE
OBJECT
PRIMITIVE
NUMBER
LEXEME
ADDRESS
INSTANCE
USER
a9
For a total of 18 defclasses.
FuzzyCLIPS> (list-definstances)
a10
For a total of 1 definstances.
FuzzyCLIPS> (list-defmessage-handlers)
init primary in class USER
delete primary in class USER
create primary in class USER
print primary in class USER
direct-modify primary in class USER
message-modify primary in class USER
direct-duplicate primary in class USER
message-duplicate primary in class USER
get-q primary in class a9
put-q primary in class a9
a11 primary in class a9
For a total of 11 message-handlers.
FuzzyCLIPS> (clear)
FuzzyCLIPS> (bload "Temp//chksyntx.bin")
TRUE
FuzzyCLIPS> (check-syntax "(deffacts a1 (foo))")
FALSE
FuzzyCLIPS> (check-syntax "(deftemplate a2 (slot g))")
FALSE
FuzzyCLIPS> (check-syntax "(defrule a3 =>)")
FALSE
FuzzyCLIPS> (check-syntax "(defglobal ?*a4* = 10)")
FALSE
FuzzyCLIPS> (check-syntax "(defmodule a5)")
FALSE
FuzzyCLIPS> (check-syntax "(deffunction a6 (?x) (* 6 ?x))")
FALSE
FuzzyCLIPS> (check-syntax "(defgeneric a7)")
FALSE
FuzzyCLIPS> (check-syntax "(defmethod a8 ((?x INTEGER)) (* 9 ?x))")
FALSE
FuzzyCLIPS> (check-syntax " (defclass a9 (is-a USER) 
   (role concrete)
   (slot w (create-accessor read-write)))")
FALSE
FuzzyCLIPS> (check-syntax "(definstances a10 (b10i of a9 (q 54)))")
FALSE
FuzzyCLIPS> (check-syntax "(defmessage-handler a9 a11 (?u) (* ?self:q 10))")
FALSE
FuzzyCLIPS> (reset)
FuzzyCLIPS> (facts)
f-1     (x y z) CF 1.00 
For a total of 1 fact.
FuzzyCLIPS> (agenda)
0      a3: f-1
For a total of 1 activation.
FuzzyCLIPS> (assert (a2 (r 2) (s 1 3)))
<Fact-2>
FuzzyCLIPS> (instances)
[a10i] of a9
For a total of 1 instance.
FuzzyCLIPS> ?*a4*
9
FuzzyCLIPS> (list-deftemplates a5)
FuzzyCLIPS> (a6 2)
4
FuzzyCLIPS> (a8 3)
21
FuzzyCLIPS> (send [a10i] a11 3)
162
FuzzyCLIPS> (check-syntax "(deffacts b1 (foo))")
FALSE
FuzzyCLIPS> (check-syntax "(deftemplate b2 (slot g))")
FALSE
FuzzyCLIPS> (check-syntax "(defrule b3 =>)")
FALSE
FuzzyCLIPS> (check-syntax "(defglobal ?*b4* = 10)")
FALSE
FuzzyCLIPS> (check-syntax "(defmodule b5)")
FALSE
FuzzyCLIPS> (check-syntax "(deffunction b6 (?x) (* 6 ?x))")
FALSE
FuzzyCLIPS> (check-syntax "(defgeneric b7)")
FALSE
FuzzyCLIPS> (check-syntax "(defmethod b8 ((?x INTEGER)) (* 9 ?x))")
FALSE
FuzzyCLIPS> 
(check-syntax " (defclass b9 (is-a USER) 
   (role concrete)
   (slot w (create-accessor read-write)))")
FALSE
FuzzyCLIPS> (check-syntax "(definstances b10 (c10i of a9 (q 54)))")
FALSE
FuzzyCLIPS> (check-syntax "(defmessage-handler a9 b11 (?u) (* ?self:q 10))")
FALSE
FuzzyCLIPS> 
(check-syntax "(deffacts c1 foo))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for RHS patterns.

ERROR:
(deffacts MAIN::c1
   foo
" FALSE)
FuzzyCLIPS> (check-syntax "(deftemplate c2 slot g))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for deftemplate.

ERROR:
(deftemplate MAIN::c2
   slot
" FALSE)
FuzzyCLIPS> (check-syntax "(defrule c3)")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defrule.

ERROR:
(defrule MAIN::c3)
" FALSE)
FuzzyCLIPS> (check-syntax "(defglobal ?*c4* 10)")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defglobal.

ERROR:
(defglobal MAIN ?*c4* 10
" FALSE)
FuzzyCLIPS> (check-syntax "(defmodule c5 (x))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defmodule.

ERROR:
(defmodule c5
   (x
" FALSE)
FuzzyCLIPS> (check-syntax "(deffunction c6 (?x (* 6 ?x))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for parameter list.

ERROR:
(deffunction MAIN::c6
   (?x (
" FALSE)
FuzzyCLIPS> (check-syntax "(defgeneric c7 (y))")
("[GENRCPSR1] Expected ')' to complete defgeneric.

ERROR:
(defgeneric MAIN::c7
   (
" FALSE)
FuzzyCLIPS> (check-syntax "(defmethod c8 (?x INTEGER)) (* 9 ?x))")
("[GENRCPSR9] Expected a variable or '(' for parameter specification.

ERROR:
(defmethod MAIN::c8
   (?x
    INTEGER
" FALSE)
FuzzyCLIPS> 
(check-syntax " (defclass c9 (is-a USER) 
   (role bogus)
   (slot w (create-accessor read-write)))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defclass.

ERROR:
(defclass MAIN::c9
   (is-a USER)
   (role bogus
" FALSE)
FuzzyCLIPS> (check-syntax "(definstances c10 c10i of a9 (q 54)))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for definstances.

ERROR:
(definstances MAIN::c10
   c10i
" FALSE)
FuzzyCLIPS> (check-syntax "(defmessage-handler a9 c11 ?u) (* ?self:q 10))")
("
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defmessage-handler.

ERROR:
(defmessage-handler MAIN::a9 c11 ?u 
" FALSE)
FuzzyCLIPS> (list-deffacts)
a1
For a total of 1 deffacts.
FuzzyCLIPS> (list-deftemplates)
x
a2
For a total of 2 deftemplates.
FuzzyCLIPS> (list-defrules)
a3
For a total of 1 defrule.
FuzzyCLIPS> (list-defglobals)
a4
For a total of 1 defglobal.
FuzzyCLIPS> (list-defmodules)
MAIN
a5
For a total of 2 defmodules.
FuzzyCLIPS> (list-deffunctions)
a6
For a total of 1 deffunction.
FuzzyCLIPS> (list-defgenerics)
a7
a8
For a total of 2 defgenerics.
FuzzyCLIPS> (list-defmethods)

a8 #1  (INTEGER)
For a total of 1 method.
FuzzyCLIPS> (list-defclasses)
FLOAT
INTEGER
SYMBOL
STRING
MULTIFIELD
EXTERNAL-ADDRESS
FACT-ADDRESS
INSTANCE-ADDRESS
INSTANCE-NAME
FUZZY-VALUE
OBJECT
PRIMITIVE
NUMBER
LEXEME
ADDRESS
INSTANCE
USER
a9
For a total of 18 defclasses.
FuzzyCLIPS> (list-definstances)
a10
For a total of 1 definstances.
FuzzyCLIPS> (list-defmessage-handlers)
init primary in class USER
delete primary in class USER
create primary in class USER
print primary in class USER
direct-modify primary in class USER
message-modify primary in class USER
direct-duplicate primary in class USER
message-duplicate primary in class USER
get-q primary in class a9
put-q primary in class a9
a11 primary in class a9
For a total of 11 message-handlers.
FuzzyCLIPS> (clear)
FuzzyCLIPS> (dribble-off)
